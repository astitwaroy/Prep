import{_ as o,C as a,c as d,o as h,j as i,a4 as g,G as r,w as n,a as s}from"./chunks/framework.BTsuxa0O.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/2792-neighboring-bitwise-xor/index.md","filePath":"DSA/Leetcode/2792-neighboring-bitwise-xor/index.md"}'),p={name:"DSA/Leetcode/2792-neighboring-bitwise-xor/index.md"},k={align:"center"};function c(E,e,u,b,y,m){const t=a("h"),l=a("CodeTabs");return h(),d("div",null,[i("div",k,[r(t,{style:{"margin-bottom":"0px","margin-top":"0px",color:"purple"},align:"center",class:"header"},{default:n(()=>[...e[0]||(e[0]=[i("h2",{id:"⌨-2792-neighboring-bitwise-xor",tabindex:"-1"},[s("⌨ 2792. Neighboring Bitwise XOR "),i("a",{class:"header-anchor",href:"#⌨-2792-neighboring-bitwise-xor","aria-label":'Permalink to "⌨ 2792. Neighboring Bitwise XOR"'},"​")],-1)])]),_:1})]),e[3]||(e[3]=g(`<h2><a href="https://leetcode.com/problems/neighboring-bitwise-xor" target="_blank">2792. Neighboring Bitwise XOR</a></h2><h3>Medium</h3><hr><p>A <strong>0-indexed</strong> array <code>derived</code> with length <code>n</code> is derived by computing the <strong>bitwise XOR</strong> (⊕) of adjacent values in a <strong>binary array</strong> <code>original</code> of length <code>n</code>.</p><p>Specifically, for each index <code>i</code> in the range <code>[0, n - 1]</code>:</p><ul><li>If <code>i = n - 1</code>, then <code>derived[i] = original[i] ⊕ original[0]</code>.</li><li>Otherwise, <code>derived[i] = original[i] ⊕ original[i + 1]</code>.</li></ul><p>Given an array <code>derived</code>, your task is to determine whether there exists a <strong>valid binary array</strong> <code>original</code> that could have formed <code>derived</code>.</p><p>Return <em><strong>true</strong> if such an array exists or <strong>false</strong> otherwise.</em></p><ul><li>A binary array is an array containing only <strong>0&#39;s</strong> and <strong>1&#39;s</strong></li></ul><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> derived = [1,1,0]
<strong>Output:</strong> true
<strong>Explanation:</strong> A valid original array that gives derived is [0,1,0].
derived[0] = original[0] ⊕ original[1] = 0 ⊕ 1 = 1 
derived[1] = original[1] ⊕ original[2] = 1 ⊕ 0 = 1
derived[2] = original[2] ⊕ original[0] = 0 ⊕ 0 = 0
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> derived = [1,1]
<strong>Output:</strong> true
<strong>Explanation:</strong> A valid original array that gives derived is [0,1].
derived[0] = original[0] ⊕ original[1] = 1
derived[1] = original[1] ⊕ original[0] = 1
</pre><p><strong class="example">Example 3:</strong></p><pre><strong>Input:</strong> derived = [1,0]
<strong>Output:</strong> false
<strong>Explanation:</strong> There is no valid original array that gives derived.
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li><code>n == derived.length</code></li><li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li><li>The values in <code>derived</code> are either <strong>0&#39;s</strong> or <strong>1&#39;s</strong></li></ul>`,19)),r(l,{languages:[{name:"C++",slot:"cpp"},{name:"Java",slot:"java"}]},{java:n(()=>[...e[1]||(e[1]=[i("div",{class:"language-java vp-adaptive-theme line-numbers-mode"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"java"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Solution"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," boolean"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," doesValidArrayExist"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"[] "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"derived"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," n "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," derived.length;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xor "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        for"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ele "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," derived)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xor "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"^="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ele;")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xor "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),i("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[i("span",{class:"line-number"},"1"),i("br"),i("span",{class:"line-number"},"2"),i("br"),i("span",{class:"line-number"},"3"),i("br"),i("span",{class:"line-number"},"4"),i("br"),i("span",{class:"line-number"},"5"),i("br"),i("span",{class:"line-number"},"6"),i("br"),i("span",{class:"line-number"},"7"),i("br"),i("span",{class:"line-number"},"8"),i("br"),i("span",{class:"line-number"},"9"),i("br")])],-1)])]),cpp:n(()=>[...e[2]||(e[2]=[i("div",{class:"language-cpp vp-adaptive-theme line-numbers-mode"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"cpp"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Add your C++ solution here")])])]),i("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[i("span",{class:"line-number"},"1"),i("br")])],-1)])]),_:1})])}const A=o(p,[["render",c]]);export{x as __pageData,A as default};
