import{_ as o,c as t,o as n,ag as a}from"./chunks/framework.DUDLMHYb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/TREE/3307-find-the-maximum-sum-of-node-values/README.md","filePath":"DSA/TREE/3307-find-the-maximum-sum-of-node-values/README.md"}'),s={name:"DSA/TREE/3307-find-the-maximum-sum-of-node-values/README.md"};function d(i,e,c,r,l,m){return n(),t("div",null,[...e[0]||(e[0]=[a('<h2 id="_3307-find-the-maximum-sum-of-node-values" tabindex="-1">3307. Find the Maximum Sum of Node Values <a class="header-anchor" href="#_3307-find-the-maximum-sum-of-node-values" aria-label="Permalink to &quot;3307. Find the Maximum Sum of Node Values&quot;">​</a></h2><p><strong>Difficulty:</strong> Hard</p><hr><p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [uᵢ, vᵢ]</code> indicates that there is an edge between nodes <code>uᵢ</code> and <code>vᵢ</code> in the tree. You are also given a <strong>positive</strong> integer <code>k</code>, and a <strong>0-indexed</strong> array of <strong>non-negative</strong> integers <code>nums</code> of length <code>n</code>, where <code>nums[i]</code> represents the <strong>value</strong> of the node numbered <code>i</code>.</p><p>Alice wants the sum of values of tree nodes to be <strong>maximum</strong>, for which Alice can perform the following operation <strong>any</strong> number of times (<strong>including zero</strong>) on the tree:</p><ul><li>Choose any edge <code>[u, v]</code> connecting the nodes <code>u</code> and <code>v</code>, and update their values as follows: <ul><li><code>nums[u] = nums[u] XOR k</code></li><li><code>nums[v] = nums[v] XOR k</code></li></ul></li></ul><p>Return <em>the <strong>maximum</strong> possible <strong>sum</strong> of the <strong>values</strong> Alice can achieve by performing the operation <strong>any</strong> number of times</em>.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><img src="https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012513.png" alt="Example 1"></p><p><strong>Input:</strong> <code>nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]</code></p><p><strong>Output:</strong> <code>6</code></p><p><strong>Explanation:</strong> Alice can achieve the maximum sum of 6 using a single operation:</p><ul><li>Choose the edge <code>[0,2]</code>. <code>nums[0]</code> and <code>nums[2]</code> become: 1 XOR 3 = 2, and the array nums becomes: <code>[1,2,1]</code> → <code>[2,2,2]</code>.</li></ul><p>The total sum of values is 2 + 2 + 2 = 6. It can be shown that 6 is the maximum achievable sum of values.</p><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><img src="https://assets.leetcode.com/uploads/2024/01/09/screenshot-2024-01-09-220017.png" alt="Example 2"></p><p><strong>Input:</strong> <code>nums = [2,3], k = 7, edges = [[0,1]]</code></p><p><strong>Output:</strong> <code>9</code></p><p><strong>Explanation:</strong> Alice can achieve the maximum sum of 9 using a single operation:</p><ul><li>Choose the edge <code>[0,1]</code>. <code>nums[0]</code> becomes: 2 XOR 7 = 5 and <code>nums[1]</code> become: 3 XOR 7 = 4, and the array nums becomes: <code>[2,3]</code> → <code>[5,4]</code>.</li></ul><p>The total sum of values is 5 + 4 = 9. It can be shown that 9 is the maximum achievable sum of values.</p><h3 id="example-3" tabindex="-1">Example 3: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3:&quot;">​</a></h3><p><img src="https://assets.leetcode.com/uploads/2023/11/09/screenshot-2023-11-10-012641.png" alt="Example 3"></p><p><strong>Input:</strong> <code>nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]</code></p><p><strong>Output:</strong> <code>42</code></p><p><strong>Explanation:</strong> The maximum achievable sum is 42 which can be achieved by Alice performing no operations.</p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>2 &lt;= n == nums.length &lt;= 2 * 10^4</code></li><li><code>1 &lt;= k &lt;= 10^9</code></li><li><code>0 &lt;= nums[i] &lt;= 10^9</code></li><li><code>edges.length == n - 1</code></li><li><code>edges[i].length == 2</code></li><li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li><li>The input is generated such that <code>edges</code> represent a valid tree.</li></ul>',28)])])}const p=o(s,[["render",d]]);export{h as __pageData,p as default};
