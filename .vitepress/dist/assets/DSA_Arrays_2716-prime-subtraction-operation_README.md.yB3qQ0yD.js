import{_ as o,C as r,c as s,o as a,ag as i,j as t,G as p,w as l,a as c}from"./chunks/framework.DUDLMHYb.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/2716-prime-subtraction-operation/README.md","filePath":"DSA/Arrays/2716-prime-subtraction-operation/README.md"}'),u={name:"DSA/Arrays/2716-prime-subtraction-operation/README.md"};function m(d,e,g,f,h,y){const n=r("font");return a(),s("div",null,[e[3]||(e[3]=i(`<h2><a href="https://leetcode.com/problems/prime-subtraction-operation">2716. Prime Subtraction Operation</a></h2><h3>Medium</h3><hr><p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p><p>You can perform the following operation as many times as you want:</p><ul><li>Pick an index <code>i</code> that you haven’t picked before, and pick a prime <code>p</code> <strong>strictly less than</strong> <code>nums[i]</code>, then subtract <code>p</code> from <code>nums[i]</code>.</li></ul><p>Return <em>true if you can make <code>nums</code> a strictly increasing array using the above operation and false otherwise.</em></p><p>A <strong>strictly increasing array</strong> is an array whose each element is strictly greater than its preceding element.</p><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> nums = [4,9,6,10]
<strong>Output:</strong> true
<strong>Explanation:</strong> In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].
In the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].
After the second operation, nums is sorted in strictly increasing order, so the answer is true.</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> nums = [6,8,11,12]
<strong>Output:</strong> true
<strong>Explanation: </strong>Initially nums is sorted in strictly increasing order, so we don&#39;t need to make any operations.</pre><p><strong class="example">Example 3:</strong></p><pre><strong>Input:</strong> nums = [5,8,3]
<strong>Output:</strong> false
<strong>Explanation:</strong> It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.</pre><p> </p><p><strong>Constraints:</strong></p>`,17)),t("ul",null,[e[1]||(e[1]=t("li",null,[t("code",null,"1 <= nums.length <= 1000")],-1)),e[2]||(e[2]=t("li",null,[t("code",null,"1 <= nums[i] <= 1000")],-1)),t("li",null,[t("code",null,[p(n,{face:"monospace"},{default:l(()=>[...e[0]||(e[0]=[c("nums.length == n",-1)])]),_:1})])])])])}const E=o(u,[["render",m]]);export{x as __pageData,E as default};
