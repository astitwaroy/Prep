import{_ as d,c as e,o as s,ag as o}from"./chunks/framework.DUDLMHYb.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3725-maximum-and-minimum-sums-of-at-most-size-k-subarrays/README.md","filePath":"DSA/Leetcode/3725-maximum-and-minimum-sums-of-at-most-size-k-subarrays/README.md"}'),l={name:"DSA/Leetcode/3725-maximum-and-minimum-sums-of-at-most-size-k-subarrays/README.md"};function r(a,t,b,p,i,c){return s(),e("div",null,[...t[0]||(t[0]=[o('<h2><a href="https://leetcode.com/problems/maximum-and-minimum-sums-of-at-most-size-k-subarrays">3725. Maximum and Minimum Sums of at Most Size K Subarrays</a></h2><h3>Hard</h3><hr><p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>. Return the sum of the <strong>maximum</strong> and <strong>minimum</strong> elements of all <span data-keyword="subarray-nonempty">subarrays</span> with <strong>at most</strong> <code>k</code> elements.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [1,2,3], k = 2</span></p><p><strong>Output:</strong> <span class="example-io">20</span></p><p><strong>Explanation:</strong></p><p>The subarrays of <code>nums</code> with at most 2 elements are:</p><table style="border:1px solid black;"><tbody><tr><th style="border:1px solid black;"><b>Subarray</b></th><th style="border:1px solid black;">Minimum</th><th style="border:1px solid black;">Maximum</th><th style="border:1px solid black;">Sum</th></tr><tr><td style="border:1px solid black;"><code>[1]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td></tr><tr><td style="border:1px solid black;"><code>[2]</code></td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">4</td></tr><tr><td style="border:1px solid black;"><code>[3]</code></td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">6</td></tr><tr><td style="border:1px solid black;"><code>[1, 2]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">3</td></tr><tr><td style="border:1px solid black;"><code>[2, 3]</code></td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">5</td></tr><tr><td style="border:1px solid black;"><strong>Final Total</strong></td><td style="border:1px solid black;"> </td><td style="border:1px solid black;"> </td><td style="border:1px solid black;">20</td></tr></tbody></table><p>The output would be 20.</p></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [1,-3,1], k = 2</span></p><p><strong>Output:</strong> <span class="example-io">-6</span></p><p><strong>Explanation:</strong></p><p>The subarrays of <code>nums</code> with at most 2 elements are:</p><table style="border:1px solid black;"><tbody><tr><th style="border:1px solid black;"><b>Subarray</b></th><th style="border:1px solid black;">Minimum</th><th style="border:1px solid black;">Maximum</th><th style="border:1px solid black;">Sum</th></tr><tr><td style="border:1px solid black;"><code>[1]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td></tr><tr><td style="border:1px solid black;"><code>[-3]</code></td><td style="border:1px solid black;">-3</td><td style="border:1px solid black;">-3</td><td style="border:1px solid black;">-6</td></tr><tr><td style="border:1px solid black;"><code>[1]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td></tr><tr><td style="border:1px solid black;"><code>[1, -3]</code></td><td style="border:1px solid black;">-3</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">-2</td></tr><tr><td style="border:1px solid black;"><code>[-3, 1]</code></td><td style="border:1px solid black;">-3</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">-2</td></tr><tr><td style="border:1px solid black;"><strong>Final Total</strong></td><td style="border:1px solid black;"> </td><td style="border:1px solid black;"> </td><td style="border:1px solid black;">-6</td></tr></tbody></table><p>The output would be -6.</p></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 80000</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li><li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li></ul>',12)])])}const x=d(l,[["render",r]]);export{m as __pageData,x as default};
