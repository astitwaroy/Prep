import{_ as d,C as l,c as r,o as a,ag as n,j as e,a as s,G as p,w as i}from"./chunks/framework.DUDLMHYb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/3714-maximum-and-minimum-sums-of-at-most-size-k-subsequences/README.md","filePath":"DSA/Arrays/3714-maximum-and-minimum-sums-of-at-most-size-k-subsequences/README.md"}'),m={name:"DSA/Arrays/3714-maximum-and-minimum-sums-of-at-most-size-k-subsequences/README.md"};function c(u,t,b,x,k,g){const o=l("font");return a(),r("div",null,[t[3]||(t[3]=n('<h2><a href="https://leetcode.com/problems/maximum-and-minimum-sums-of-at-most-size-k-subsequences">3714. Maximum and Minimum Sums of at Most Size K Subsequences</a></h2><h3>Medium</h3><hr><p>You are given an integer array <code>nums</code> and a positive integer <code>k</code>. Return the sum of the <strong>maximum</strong> and <strong>minimum</strong> elements of all <strong><span data-keyword="subsequence-sequence-nonempty">subsequences</span></strong> of <code>nums</code> with <strong>at most</strong> <code>k</code> elements.</p><p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [1,2,3], k = 2</span></p><p><strong>Output:</strong> 24</p><p><strong>Explanation:</strong></p><p>The subsequences of <code>nums</code> with at most 2 elements are:</p><table style="border:1px solid black;"><tbody><tr><th style="border:1px solid black;"><b>Subsequence </b></th><th style="border:1px solid black;">Minimum</th><th style="border:1px solid black;">Maximum</th><th style="border:1px solid black;">Sum</th></tr><tr><td style="border:1px solid black;"><code>[1]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td></tr><tr><td style="border:1px solid black;"><code>[2]</code></td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">4</td></tr><tr><td style="border:1px solid black;"><code>[3]</code></td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">6</td></tr><tr><td style="border:1px solid black;"><code>[1, 2]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">3</td></tr><tr><td style="border:1px solid black;"><code>[1, 3]</code></td><td style="border:1px solid black;">1</td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">4</td></tr><tr><td style="border:1px solid black;"><code>[2, 3]</code></td><td style="border:1px solid black;">2</td><td style="border:1px solid black;">3</td><td style="border:1px solid black;">5</td></tr><tr><td style="border:1px solid black;"><strong>Final Total</strong></td><td style="border:1px solid black;"> </td><td style="border:1px solid black;"> </td><td style="border:1px solid black;">24</td></tr></tbody></table><p>The output would be 24.</p></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [5,0,6], k = 1</span></p><p><strong>Output:</strong> 2<span class="example-io">2</span></p><p><strong>Explanation: </strong></p><p>For subsequences with exactly 1 element, the minimum and maximum values are the element itself. Therefore, the total is <code>5 + 5 + 0 + 0 + 6 + 6 = 22</code>.</p></div><p><strong class="example">Example 3:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [1,1,1], k = 2</span></p><p><strong>Output:</strong> 12</p><p><strong>Explanation:</strong></p><p>The subsequences <code>[1, 1]</code> and <code>[1]</code> each appear 3 times. For all of them, the minimum and maximum are both 1. Thus, the total is 12.</p></div><p> </p><p><strong>Constraints:</strong></p>',14)),e("ul",null,[t[1]||(t[1]=e("li",null,[e("code",null,[s("1 <= nums.length <= 10"),e("sup",null,"5")])],-1)),t[2]||(t[2]=e("li",null,[e("code",null,[s("0 <= nums[i] <= 10"),e("sup",null,"9")])],-1)),e("li",null,[e("code",null,[p(o,{face:"monospace"},{default:i(()=>[...t[0]||(t[0]=[s("1 <= k <= min(70, nums.length)",-1)])]),_:1})])])])])}const f=d(m,[["render",c]]);export{h as __pageData,f as default};
