import{_ as a,c as e,o as t,ag as n}from"./chunks/framework.DUDLMHYb.js";const b=JSON.parse('{"title":"🎨 Design Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"LLD/03-design-patterns/index.md","filePath":"LLD/03-design-patterns/index.md"}'),i={name:"LLD/03-design-patterns/index.md"};function r(l,s,o,p,h,d){return t(),e("div",null,[...s[0]||(s[0]=[n(`<p>🧑‍💻 <strong>Author:</strong> RK ROY</p><h1 id="🎨-design-patterns" tabindex="-1">🎨 Design Patterns <a class="header-anchor" href="#🎨-design-patterns" aria-label="Permalink to &quot;🎨 Design Patterns&quot;">​</a></h1><p>Design patterns are reusable solutions to common problems in software design. They represent best practices evolved over time by experienced object-oriented software developers. This section covers all 23 Gang of Four (GoF) design patterns with detailed explanations, examples, and real-world implementations.</p><h2 id="🎯-what-are-design-patterns" tabindex="-1">🎯 What are Design Patterns? <a class="header-anchor" href="#🎯-what-are-design-patterns" aria-label="Permalink to &quot;🎯 What are Design Patterns?&quot;">​</a></h2><blockquote><p>Design patterns are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.</p><p><em>- Gang of Four</em></p></blockquote><h3 id="key-benefits" tabindex="-1">Key Benefits <a class="header-anchor" href="#key-benefits" aria-label="Permalink to &quot;Key Benefits&quot;">​</a></h3><ul><li><strong>Reusability</strong>: Proven solutions that can be applied to similar problems</li><li><strong>Communication</strong>: Common vocabulary for developers</li><li><strong>Best Practices</strong>: Encapsulate expert knowledge and experience</li><li><strong>Flexibility</strong>: Make code more flexible and maintainable</li></ul><h2 id="📚-pattern-categories" tabindex="-1">📚 Pattern Categories <a class="header-anchor" href="#📚-pattern-categories" aria-label="Permalink to &quot;📚 Pattern Categories&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mindmap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root((Design Patterns))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Creational</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object Creation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Singleton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Factory Method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Abstract Factory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Builder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Prototype</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Structural</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object Composition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Adapter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Decorator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Facade</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Composite</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Bridge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Flyweight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Proxy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Behavioral</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object Interaction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Observer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Strategy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      State</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Template Method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Chain of Responsibility</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Mediator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Visitor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Iterator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Memento</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="🏗️-creational-patterns" tabindex="-1">🏗️ Creational Patterns <a class="header-anchor" href="#🏗️-creational-patterns" aria-label="Permalink to &quot;🏗️ Creational Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./creational/01-singleton.html"><strong>Singleton</strong></a></td><td>Ensure only one instance exists</td><td>Need exactly one instance (DB connection, logger)</td></tr><tr><td><a href="./creational/02-factory-method.html"><strong>Factory Method</strong></a></td><td>Create objects without specifying exact classes</td><td>Object creation logic is complex or varies</td></tr><tr><td><a href="./creational/03-abstract-factory.html"><strong>Abstract Factory</strong></a></td><td>Create families of related objects</td><td>Need to create groups of related objects</td></tr><tr><td><a href="./creational/04-builder.html"><strong>Builder</strong></a></td><td>Construct complex objects step by step</td><td>Objects have many optional parameters</td></tr><tr><td><a href="./creational/05-prototype.html"><strong>Prototype</strong></a></td><td>Create objects by cloning existing instances</td><td>Object creation is expensive</td></tr></tbody></table><h3 id="creational-patterns-overview" tabindex="-1">Creational Patterns Overview <a class="header-anchor" href="#creational-patterns-overview" aria-label="Permalink to &quot;Creational Patterns Overview&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Object Creation Need] --&gt; B{Complexity?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Simple| C[Factory Method]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Complex| D[Builder]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Single Instance| E[Singleton]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Clone Existing| F[Prototype]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Family of Objects| G[Abstract Factory]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="🏛️-structural-patterns" tabindex="-1">🏛️ Structural Patterns <a class="header-anchor" href="#🏛️-structural-patterns" aria-label="Permalink to &quot;🏛️ Structural Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Deal with object composition, forming larger structures from individual objects.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./structural/01-adapter.html"><strong>Adapter</strong></a></td><td>Allow incompatible interfaces to work together</td><td>Integrate existing classes with incompatible interfaces</td></tr><tr><td><a href="./structural/02-decorator.html"><strong>Decorator</strong></a></td><td>Add behavior to objects dynamically</td><td>Need to add responsibilities without subclassing</td></tr><tr><td><a href="./structural/03-facade.html"><strong>Facade</strong></a></td><td>Provide simplified interface to complex subsystem</td><td>Want to hide complexity of subsystem</td></tr><tr><td><a href="./structural/04-composite.html"><strong>Composite</strong></a></td><td>Compose objects into tree structures</td><td>Need to treat individual and composite objects uniformly</td></tr><tr><td><a href="./structural/05-bridge.html"><strong>Bridge</strong></a></td><td>Separate abstraction from implementation</td><td>Want to avoid permanent binding between abstraction and implementation</td></tr><tr><td><a href="./structural/06-flyweight.html"><strong>Flyweight</strong></a></td><td>Share objects efficiently to support large numbers</td><td>Need to support large numbers of fine-grained objects</td></tr><tr><td><a href="./structural/07-proxy.html"><strong>Proxy</strong></a></td><td>Provide placeholder/surrogate for another object</td><td>Need to control access to another object</td></tr></tbody></table><h3 id="structural-patterns-overview" tabindex="-1">Structural Patterns Overview <a class="header-anchor" href="#structural-patterns-overview" aria-label="Permalink to &quot;Structural Patterns Overview&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Structure Problem] --&gt; B{Type?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Interface Mismatch| C[Adapter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Add Behavior| D[Decorator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Simplify Complex System| E[Facade]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Tree Structure| F[Composite]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Separate Concerns| G[Bridge]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Memory Optimization| H[Flyweight]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Control Access| I[Proxy]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="🎭-behavioral-patterns" tabindex="-1">🎭 Behavioral Patterns <a class="header-anchor" href="#🎭-behavioral-patterns" aria-label="Permalink to &quot;🎭 Behavioral Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Focus on communication between objects and the assignment of responsibilities.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./behavioral/01-observer.html"><strong>Observer</strong></a></td><td>Define one-to-many dependency between objects</td><td>Changes to one object require updating multiple objects</td></tr><tr><td><a href="./behavioral/02-strategy.html"><strong>Strategy</strong></a></td><td>Define family of algorithms and make them interchangeable</td><td>Have multiple ways to perform a task</td></tr><tr><td><a href="./behavioral/03-command.html"><strong>Command</strong></a></td><td>Encapsulate requests as objects</td><td>Need to parameterize objects with operations</td></tr><tr><td><a href="./behavioral/04-state.html"><strong>State</strong></a></td><td>Allow object to alter behavior when internal state changes</td><td>Object behavior depends on its state</td></tr><tr><td><a href="./behavioral/05-template-method.html"><strong>Template Method</strong></a></td><td>Define skeleton of algorithm, let subclasses override steps</td><td>Algorithm structure is fixed but steps vary</td></tr><tr><td><a href="./behavioral/06-chain-of-responsibility.html"><strong>Chain of Responsibility</strong></a></td><td>Pass requests along chain of handlers</td><td>Multiple objects can handle request</td></tr><tr><td><a href="./behavioral/07-mediator.html"><strong>Mediator</strong></a></td><td>Define how objects interact without direct references</td><td>Complex interactions between multiple objects</td></tr><tr><td><a href="./behavioral/08-visitor.html"><strong>Visitor</strong></a></td><td>Define new operations without changing object structure</td><td>Need to perform operations on objects of different classes</td></tr><tr><td><a href="./behavioral/09-iterator.html"><strong>Iterator</strong></a></td><td>Provide way to access elements sequentially</td><td>Need to traverse collection without exposing structure</td></tr><tr><td><a href="./behavioral/10-memento.html"><strong>Memento</strong></a></td><td>Capture and restore object state</td><td>Need to save/restore object state</td></tr></tbody></table><h3 id="behavioral-patterns-overview" tabindex="-1">Behavioral Patterns Overview <a class="header-anchor" href="#behavioral-patterns-overview" aria-label="Permalink to &quot;Behavioral Patterns Overview&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Behavior Problem] --&gt; B{Type?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Notification| C[Observer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Algorithm Choice| D[Strategy]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Request Processing| E[Command]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|State-dependent Behavior| F[State]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Algorithm Template| G[Template Method]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Request Chain| H[Chain of Responsibility]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Object Communication| I[Mediator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Operations on Structure| J[Visitor]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Collection Traversal| K[Iterator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|State Management| L[Memento]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="🚀-pattern-selection-guide" tabindex="-1">🚀 Pattern Selection Guide <a class="header-anchor" href="#🚀-pattern-selection-guide" aria-label="Permalink to &quot;🚀 Pattern Selection Guide&quot;">​</a></h2><h3 id="by-problem-type" tabindex="-1">By Problem Type <a class="header-anchor" href="#by-problem-type" aria-label="Permalink to &quot;By Problem Type&quot;">​</a></h3><h4 id="object-creation-problems" tabindex="-1">Object Creation Problems <a class="header-anchor" href="#object-creation-problems" aria-label="Permalink to &quot;Object Creation Problems&quot;">​</a></h4><div align="center"><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Need to Create Objects] --&gt; B{How many instances?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Exactly One| C[Singleton]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Multiple| D{Creation complexity?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|Simple| E[Factory Method]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|Complex Parameters| F[Builder]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|Family of Objects| G[Abstract Factory]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt;|Copy Existing| H[Prototype]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><h4 id="structural-problems" tabindex="-1">Structural Problems <a class="header-anchor" href="#structural-problems" aria-label="Permalink to &quot;Structural Problems&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Structural Issue] --&gt; B{What&#39;s the problem?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Incompatible Interfaces| C[Adapter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Need to Add Behavior| D[Decorator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Too Complex| E[Facade]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Tree/Hierarchical Data| F[Composite]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Separate Abstraction| G[Bridge]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Too Many Objects| H[Flyweight]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Control Access| I[Proxy]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="behavioral-problems" tabindex="-1">Behavioral Problems <a class="header-anchor" href="#behavioral-problems" aria-label="Permalink to &quot;Behavioral Problems&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Behavior Issue] --&gt; B{What&#39;s needed?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Notify Multiple Objects| C[Observer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Choose Algorithm| D[Strategy]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Encapsulate Requests| E[Command]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|State-based Behavior| F[State]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Process Chain| G[Chain of Responsibility]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|Complex Communication| H[Mediator]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="🎯-popular-pattern-combinations" tabindex="-1">🎯 Popular Pattern Combinations <a class="header-anchor" href="#🎯-popular-pattern-combinations" aria-label="Permalink to &quot;🎯 Popular Pattern Combinations&quot;">​</a></h2><h3 id="model-view-controller-mvc" tabindex="-1">Model-View-Controller (MVC) <a class="header-anchor" href="#model-view-controller-mvc" aria-label="Permalink to &quot;Model-View-Controller (MVC)&quot;">​</a></h3><ul><li><strong>Observer</strong>: View observes Model</li><li><strong>Strategy</strong>: Controller strategies</li><li><strong>Composite</strong>: View hierarchies</li></ul><h3 id="enterprise-applications" tabindex="-1">Enterprise Applications <a class="header-anchor" href="#enterprise-applications" aria-label="Permalink to &quot;Enterprise Applications&quot;">​</a></h3><ul><li><strong>Factory Method</strong>: Create business objects</li><li><strong>Decorator</strong>: Add cross-cutting concerns</li><li><strong>Command</strong>: Encapsulate business operations</li><li><strong>Observer</strong>: Event-driven architecture</li></ul><h3 id="game-development" tabindex="-1">Game Development <a class="header-anchor" href="#game-development" aria-label="Permalink to &quot;Game Development&quot;">​</a></h3><ul><li><strong>State</strong>: Character states</li><li><strong>Observer</strong>: Game events</li><li><strong>Command</strong>: Player actions</li><li><strong>Flyweight</strong>: Game objects</li></ul><h2 id="🛠️-implementation-guidelines" tabindex="-1">🛠️ Implementation Guidelines <a class="header-anchor" href="#🛠️-implementation-guidelines" aria-label="Permalink to &quot;🛠️ Implementation Guidelines&quot;">​</a></h2><h3 id="when-to-use-patterns" tabindex="-1">When to Use Patterns <a class="header-anchor" href="#when-to-use-patterns" aria-label="Permalink to &quot;When to Use Patterns&quot;">​</a></h3><p>✅ <strong>DO use patterns when:</strong></p><ul><li>You have a recurring design problem</li><li>The pattern fits naturally</li><li>It improves code maintainability</li><li>Team understands the pattern</li></ul><p>❌ <strong>DON&#39;T use patterns when:</strong></p><ul><li>The problem is simple</li><li>It adds unnecessary complexity</li><li>You&#39;re forcing a pattern to fit</li><li>Team is unfamiliar with the pattern</li></ul><h3 id="anti-patterns-to-avoid" tabindex="-1">Anti-Patterns to Avoid <a class="header-anchor" href="#anti-patterns-to-avoid" aria-label="Permalink to &quot;Anti-Patterns to Avoid&quot;">​</a></h3><ul><li><strong>Golden Hammer</strong>: Using same pattern everywhere</li><li><strong>Over-Engineering</strong>: Using complex patterns for simple problems</li><li><strong>Pattern Fever</strong>: Using patterns just to use them</li><li><strong>Copy-Paste Patterns</strong>: Not understanding the pattern before using</li></ul><h2 id="📊-pattern-comparison-matrix" tabindex="-1">📊 Pattern Comparison Matrix <a class="header-anchor" href="#📊-pattern-comparison-matrix" aria-label="Permalink to &quot;📊 Pattern Comparison Matrix&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Pattern</th><th>Complexity</th><th>Flexibility</th><th>Performance</th><th>Use Frequency</th></tr></thead><tbody><tr><td>Singleton</td><td>Low</td><td>Low</td><td>High</td><td>High</td></tr><tr><td>Factory Method</td><td>Medium</td><td>High</td><td>Medium</td><td>High</td></tr><tr><td>Observer</td><td>Medium</td><td>High</td><td>Medium</td><td>High</td></tr><tr><td>Strategy</td><td>Low</td><td>High</td><td>High</td><td>High</td></tr><tr><td>Decorator</td><td>Medium</td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td>Command</td><td>Medium</td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td>Adapter</td><td>Low</td><td>Medium</td><td>High</td><td>Medium</td></tr><tr><td>Facade</td><td>Low</td><td>Low</td><td>High</td><td>Medium</td></tr></tbody></table><h2 id="🎓-learning-path" tabindex="-1">🎓 Learning Path <a class="header-anchor" href="#🎓-learning-path" aria-label="Permalink to &quot;🎓 Learning Path&quot;">​</a></h2><h3 id="beginner-path-start-here" tabindex="-1">Beginner Path (Start Here) <a class="header-anchor" href="#beginner-path-start-here" aria-label="Permalink to &quot;Beginner Path (Start Here)&quot;">​</a></h3><ol><li><strong>Singleton</strong> - Understand the concept of patterns</li><li><strong>Factory Method</strong> - Learn about object creation</li><li><strong>Observer</strong> - Understand behavioral patterns</li><li><strong>Strategy</strong> - Learn algorithm selection</li><li><strong>Decorator</strong> - Understand structural composition</li></ol><h3 id="intermediate-path" tabindex="-1">Intermediate Path <a class="header-anchor" href="#intermediate-path" aria-label="Permalink to &quot;Intermediate Path&quot;">​</a></h3><ol><li><strong>Builder</strong> - Complex object creation</li><li><strong>Adapter</strong> - Interface integration</li><li><strong>Command</strong> - Request encapsulation</li><li><strong>State</strong> - State-dependent behavior</li><li><strong>Facade</strong> - System simplification</li></ol><h3 id="advanced-path" tabindex="-1">Advanced Path <a class="header-anchor" href="#advanced-path" aria-label="Permalink to &quot;Advanced Path&quot;">​</a></h3><ol><li><strong>Abstract Factory</strong> - Complex creation patterns</li><li><strong>Proxy</strong> - Access control patterns</li><li><strong>Visitor</strong> - Complex behavioral patterns</li><li><strong>Mediator</strong> - Communication patterns</li><li><strong>Flyweight</strong> - Performance optimization</li></ol><h2 id="🔗-pattern-relationships" tabindex="-1">🔗 Pattern Relationships <a class="header-anchor" href="#🔗-pattern-relationships" aria-label="Permalink to &quot;🔗 Pattern Relationships&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%%{init: {&#39;theme&#39;: &#39;default&#39;}}%%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph &quot;Often Used Together&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        A[Observer] --&gt; B[Command]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        C[Abstract Factory] --&gt; D[Factory Method]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        E[Composite] --&gt; F[Visitor]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        G[Strategy] --&gt; H[Template Method]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph &quot;Similar Purpose&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        I[Bridge] -.-&gt; J[Adapter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        K[Decorator] -.-&gt; L[Proxy]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        M[Factory Method] -.-&gt; N[Abstract Factory]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="📚-further-reading" tabindex="-1">📚 Further Reading <a class="header-anchor" href="#📚-further-reading" aria-label="Permalink to &quot;📚 Further Reading&quot;">​</a></h2><ul><li><p><strong>Books</strong>:</p><ul><li>&quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; by Gang of Four</li><li>&quot;Head First Design Patterns&quot; by Freeman &amp; Robson</li><li>&quot;Patterns of Enterprise Application Architecture&quot; by Martin Fowler</li></ul></li><li><p><strong>Online Resources</strong>:</p><ul><li>Refactoring.Guru Design Patterns</li><li>SourceMaking Design Patterns</li><li>DoFactory Design Pattern Framework</li></ul></li></ul><h2 id="🎯-quick-reference" tabindex="-1">🎯 Quick Reference <a class="header-anchor" href="#🎯-quick-reference" aria-label="Permalink to &quot;🎯 Quick Reference&quot;">​</a></h2><h3 id="most-common-patterns-80-20-rule" tabindex="-1">Most Common Patterns (80/20 Rule) <a class="header-anchor" href="#most-common-patterns-80-20-rule" aria-label="Permalink to &quot;Most Common Patterns (80/20 Rule)&quot;">​</a></h3><ol><li><strong>Singleton</strong> - Single instance</li><li><strong>Factory Method</strong> - Object creation</li><li><strong>Observer</strong> - Event notification</li><li><strong>Strategy</strong> - Algorithm selection</li><li><strong>Decorator</strong> - Add behavior</li><li><strong>Command</strong> - Encapsulate requests</li><li><strong>Adapter</strong> - Interface conversion</li><li><strong>Facade</strong> - Simplify interface</li></ol><hr>`,64)])])}const g=a(i,[["render",r]]);export{b as __pageData,g as default};
