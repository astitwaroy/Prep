import{_ as t,c as a,o,ag as s}from"./chunks/framework.DUDLMHYb.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/1140-distant-barcodes/README.md","filePath":"DSA/Leetcode/1140-distant-barcodes/README.md"}'),r={name:"DSA/Leetcode/1140-distant-barcodes/README.md"};function n(d,e,c,p,i,l){return o(),a("div",null,[...e[0]||(e[0]=[s(`<h2><a href="https://leetcode.com/problems/distant-barcodes">1140. Distant Barcodes</a></h2><h3>Medium</h3><hr><p>In a warehouse, there is a row of barcodes, where the <code>i<sup>th</sup></code> barcode is <code>barcodes[i]</code>.</p><p>Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.</p><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> barcodes = [1,1,1,2,2,2]
<strong>Output:</strong> [2,1,2,1,2,1]
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> barcodes = [1,1,1,1,2,2,3,3]
<strong>Output:</strong> [1,3,1,3,1,2,1,2]
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= barcodes.length &lt;= 10000</code></li><li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li></ul>`,13)])])}const g=t(r,[["render",n]]);export{_ as __pageData,g as default};
