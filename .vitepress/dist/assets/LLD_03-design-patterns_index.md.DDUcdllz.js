import{_ as h,C as c,c as m,o as r,a4 as l,b as i,j as d,w as e,a,G as n,a5 as s}from"./chunks/framework.BTsuxa0O.js";const P=JSON.parse('{"title":"🎨 Design Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"LLD/03-design-patterns/index.md","filePath":"LLD/03-design-patterns/index.md"}'),u={name:"LLD/03-design-patterns/index.md"},g={align:"center"};function p(b,t,A,C,f,B){const o=c("Mermaid");return r(),m("div",null,[t[8]||(t[8]=l('<p>🧑‍💻 <strong>Author:</strong> RK ROY</p><h1 id="🎨-design-patterns" tabindex="-1">🎨 Design Patterns <a class="header-anchor" href="#🎨-design-patterns" aria-label="Permalink to &quot;🎨 Design Patterns&quot;">​</a></h1><p>Design patterns are reusable solutions to common problems in software design. They represent best practices evolved over time by experienced object-oriented software developers. This section covers all 23 Gang of Four (GoF) design patterns with detailed explanations, examples, and real-world implementations.</p><h2 id="🎯-what-are-design-patterns" tabindex="-1">🎯 What are Design Patterns? <a class="header-anchor" href="#🎯-what-are-design-patterns" aria-label="Permalink to &quot;🎯 What are Design Patterns?&quot;">​</a></h2><blockquote><p>Design patterns are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.</p><p><em>- Gang of Four</em></p></blockquote><h3 id="key-benefits" tabindex="-1">Key Benefits <a class="header-anchor" href="#key-benefits" aria-label="Permalink to &quot;Key Benefits&quot;">​</a></h3><ul><li><strong>Reusability</strong>: Proven solutions that can be applied to similar problems</li><li><strong>Communication</strong>: Common vocabulary for developers</li><li><strong>Best Practices</strong>: Encapsulate expert knowledge and experience</li><li><strong>Flexibility</strong>: Make code more flexible and maintainable</li></ul><h2 id="📚-pattern-categories" tabindex="-1">📚 Pattern Categories <a class="header-anchor" href="#📚-pattern-categories" aria-label="Permalink to &quot;📚 Pattern Categories&quot;">​</a></h2>',8)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-48",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Amindmap%0A%20%20root((Design%20Patterns))%0A%20%20%20%20Creational%0A%20%20%20%20%20%20Object%20Creation%0A%20%20%20%20%20%20Singleton%0A%20%20%20%20%20%20Factory%20Method%0A%20%20%20%20%20%20Abstract%20Factory%0A%20%20%20%20%20%20Builder%0A%20%20%20%20%20%20Prototype%0A%20%20%20%20Structural%0A%20%20%20%20%20%20Object%20Composition%0A%20%20%20%20%20%20Adapter%0A%20%20%20%20%20%20Decorator%0A%20%20%20%20%20%20Facade%0A%20%20%20%20%20%20Composite%0A%20%20%20%20%20%20Bridge%0A%20%20%20%20%20%20Flyweight%0A%20%20%20%20%20%20Proxy%0A%20%20%20%20Behavioral%0A%20%20%20%20%20%20Object%20Interaction%0A%20%20%20%20%20%20Observer%0A%20%20%20%20%20%20Strategy%0A%20%20%20%20%20%20Command%0A%20%20%20%20%20%20State%0A%20%20%20%20%20%20Template%20Method%0A%20%20%20%20%20%20Chain%20of%20Responsibility%0A%20%20%20%20%20%20Mediator%0A%20%20%20%20%20%20Visitor%0A%20%20%20%20%20%20Iterator%0A%20%20%20%20%20%20Memento%0A"})]),fallback:e(()=>[...t[0]||(t[0]=[a(" Loading... ",-1)])]),_:1})),t[9]||(t[9]=l('<h2 id="🏗️-creational-patterns" tabindex="-1">🏗️ Creational Patterns <a class="header-anchor" href="#🏗️-creational-patterns" aria-label="Permalink to &quot;🏗️ Creational Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./creational/01-singleton.html"><strong>Singleton</strong></a></td><td>Ensure only one instance exists</td><td>Need exactly one instance (DB connection, logger)</td></tr><tr><td><a href="./creational/02-factory-method.html"><strong>Factory Method</strong></a></td><td>Create objects without specifying exact classes</td><td>Object creation logic is complex or varies</td></tr><tr><td><a href="./creational/03-abstract-factory.html"><strong>Abstract Factory</strong></a></td><td>Create families of related objects</td><td>Need to create groups of related objects</td></tr><tr><td><a href="./creational/04-builder.html"><strong>Builder</strong></a></td><td>Construct complex objects step by step</td><td>Objects have many optional parameters</td></tr><tr><td><a href="./creational/05-prototype.html"><strong>Prototype</strong></a></td><td>Create objects by cloning existing instances</td><td>Object creation is expensive</td></tr></tbody></table><h3 id="creational-patterns-overview" tabindex="-1">Creational Patterns Overview <a class="header-anchor" href="#creational-patterns-overview" aria-label="Permalink to &quot;Creational Patterns Overview&quot;">​</a></h3>',4)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-130",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Agraph%20TD%0A%20%20%20%20A%5BObject%20Creation%20Need%5D%20--%3E%20B%7BComplexity%3F%7D%0A%20%20%20%20B%20--%3E%7CSimple%7C%20C%5BFactory%20Method%5D%0A%20%20%20%20B%20--%3E%7CComplex%7C%20D%5BBuilder%5D%0A%20%20%20%20B%20--%3E%7CSingle%20Instance%7C%20E%5BSingleton%5D%0A%20%20%20%20B%20--%3E%7CClone%20Existing%7C%20F%5BPrototype%5D%0A%20%20%20%20B%20--%3E%7CFamily%20of%20Objects%7C%20G%5BAbstract%20Factory%5D%0A"})]),fallback:e(()=>[...t[1]||(t[1]=[a(" Loading... ",-1)])]),_:1})),t[10]||(t[10]=l('<h2 id="🏛️-structural-patterns" tabindex="-1">🏛️ Structural Patterns <a class="header-anchor" href="#🏛️-structural-patterns" aria-label="Permalink to &quot;🏛️ Structural Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Deal with object composition, forming larger structures from individual objects.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./structural/01-adapter.html"><strong>Adapter</strong></a></td><td>Allow incompatible interfaces to work together</td><td>Integrate existing classes with incompatible interfaces</td></tr><tr><td><a href="./structural/02-decorator.html"><strong>Decorator</strong></a></td><td>Add behavior to objects dynamically</td><td>Need to add responsibilities without subclassing</td></tr><tr><td><a href="./structural/03-facade.html"><strong>Facade</strong></a></td><td>Provide simplified interface to complex subsystem</td><td>Want to hide complexity of subsystem</td></tr><tr><td><a href="./structural/04-composite.html"><strong>Composite</strong></a></td><td>Compose objects into tree structures</td><td>Need to treat individual and composite objects uniformly</td></tr><tr><td><a href="./structural/05-bridge.html"><strong>Bridge</strong></a></td><td>Separate abstraction from implementation</td><td>Want to avoid permanent binding between abstraction and implementation</td></tr><tr><td><a href="./structural/06-flyweight.html"><strong>Flyweight</strong></a></td><td>Share objects efficiently to support large numbers</td><td>Need to support large numbers of fine-grained objects</td></tr><tr><td><a href="./structural/07-proxy.html"><strong>Proxy</strong></a></td><td>Provide placeholder/surrogate for another object</td><td>Need to control access to another object</td></tr></tbody></table><h3 id="structural-patterns-overview" tabindex="-1">Structural Patterns Overview <a class="header-anchor" href="#structural-patterns-overview" aria-label="Permalink to &quot;Structural Patterns Overview&quot;">​</a></h3>',4)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-234",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Agraph%20TD%0A%20%20%20%20A%5BStructure%20Problem%5D%20--%3E%20B%7BType%3F%7D%0A%20%20%20%20B%20--%3E%7CInterface%20Mismatch%7C%20C%5BAdapter%5D%0A%20%20%20%20B%20--%3E%7CAdd%20Behavior%7C%20D%5BDecorator%5D%0A%20%20%20%20B%20--%3E%7CSimplify%20Complex%20System%7C%20E%5BFacade%5D%0A%20%20%20%20B%20--%3E%7CTree%20Structure%7C%20F%5BComposite%5D%0A%20%20%20%20B%20--%3E%7CSeparate%20Concerns%7C%20G%5BBridge%5D%0A%20%20%20%20B%20--%3E%7CMemory%20Optimization%7C%20H%5BFlyweight%5D%0A%20%20%20%20B%20--%3E%7CControl%20Access%7C%20I%5BProxy%5D%0A"})]),fallback:e(()=>[...t[2]||(t[2]=[a(" Loading... ",-1)])]),_:1})),t[11]||(t[11]=l('<h2 id="🎭-behavioral-patterns" tabindex="-1">🎭 Behavioral Patterns <a class="header-anchor" href="#🎭-behavioral-patterns" aria-label="Permalink to &quot;🎭 Behavioral Patterns&quot;">​</a></h2><p><strong>Purpose</strong>: Focus on communication between objects and the assignment of responsibilities.</p><table tabindex="0"><thead><tr><th>Pattern</th><th>Purpose</th><th>Use When</th></tr></thead><tbody><tr><td><a href="./behavioral/01-observer.html"><strong>Observer</strong></a></td><td>Define one-to-many dependency between objects</td><td>Changes to one object require updating multiple objects</td></tr><tr><td><a href="./behavioral/02-strategy.html"><strong>Strategy</strong></a></td><td>Define family of algorithms and make them interchangeable</td><td>Have multiple ways to perform a task</td></tr><tr><td><a href="./behavioral/03-command.html"><strong>Command</strong></a></td><td>Encapsulate requests as objects</td><td>Need to parameterize objects with operations</td></tr><tr><td><a href="./behavioral/04-state.html"><strong>State</strong></a></td><td>Allow object to alter behavior when internal state changes</td><td>Object behavior depends on its state</td></tr><tr><td><a href="./behavioral/05-template-method.html"><strong>Template Method</strong></a></td><td>Define skeleton of algorithm, let subclasses override steps</td><td>Algorithm structure is fixed but steps vary</td></tr><tr><td><a href="./behavioral/06-chain-of-responsibility.html"><strong>Chain of Responsibility</strong></a></td><td>Pass requests along chain of handlers</td><td>Multiple objects can handle request</td></tr><tr><td><a href="./behavioral/07-mediator.html"><strong>Mediator</strong></a></td><td>Define how objects interact without direct references</td><td>Complex interactions between multiple objects</td></tr><tr><td><a href="./behavioral/08-visitor.html"><strong>Visitor</strong></a></td><td>Define new operations without changing object structure</td><td>Need to perform operations on objects of different classes</td></tr><tr><td><a href="./behavioral/09-iterator.html"><strong>Iterator</strong></a></td><td>Provide way to access elements sequentially</td><td>Need to traverse collection without exposing structure</td></tr><tr><td><a href="./behavioral/10-memento.html"><strong>Memento</strong></a></td><td>Capture and restore object state</td><td>Need to save/restore object state</td></tr></tbody></table><h3 id="behavioral-patterns-overview" tabindex="-1">Behavioral Patterns Overview <a class="header-anchor" href="#behavioral-patterns-overview" aria-label="Permalink to &quot;Behavioral Patterns Overview&quot;">​</a></h3>',4)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-371",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Agraph%20TD%0A%20%20%20%20A%5BBehavior%20Problem%5D%20--%3E%20B%7BType%3F%7D%0A%20%20%20%20B%20--%3E%7CNotification%7C%20C%5BObserver%5D%0A%20%20%20%20B%20--%3E%7CAlgorithm%20Choice%7C%20D%5BStrategy%5D%0A%20%20%20%20B%20--%3E%7CRequest%20Processing%7C%20E%5BCommand%5D%0A%20%20%20%20B%20--%3E%7CState-dependent%20Behavior%7C%20F%5BState%5D%0A%20%20%20%20B%20--%3E%7CAlgorithm%20Template%7C%20G%5BTemplate%20Method%5D%0A%20%20%20%20B%20--%3E%7CRequest%20Chain%7C%20H%5BChain%20of%20Responsibility%5D%0A%20%20%20%20B%20--%3E%7CObject%20Communication%7C%20I%5BMediator%5D%0A%20%20%20%20B%20--%3E%7COperations%20on%20Structure%7C%20J%5BVisitor%5D%0A%20%20%20%20B%20--%3E%7CCollection%20Traversal%7C%20K%5BIterator%5D%0A%20%20%20%20B%20--%3E%7CState%20Management%7C%20L%5BMemento%5D%0A"})]),fallback:e(()=>[...t[3]||(t[3]=[a(" Loading... ",-1)])]),_:1})),t[12]||(t[12]=l('<h2 id="🚀-pattern-selection-guide" tabindex="-1">🚀 Pattern Selection Guide <a class="header-anchor" href="#🚀-pattern-selection-guide" aria-label="Permalink to &quot;🚀 Pattern Selection Guide&quot;">​</a></h2><h3 id="by-problem-type" tabindex="-1">By Problem Type <a class="header-anchor" href="#by-problem-type" aria-label="Permalink to &quot;By Problem Type&quot;">​</a></h3><h4 id="object-creation-problems" tabindex="-1">Object Creation Problems <a class="header-anchor" href="#object-creation-problems" aria-label="Permalink to &quot;Object Creation Problems&quot;">​</a></h4>',3)),d("div",g,[(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-382",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Aflowchart%20TD%0A%20%20%20%20A%5BNeed%20to%20Create%20Objects%5D%20--%3E%20B%7BHow%20many%20instances%3F%7D%0A%20%20%20%20B%20--%3E%7CExactly%20One%7C%20C%5BSingleton%5D%0A%20%20%20%20B%20--%3E%7CMultiple%7C%20D%7BCreation%20complexity%3F%7D%0A%20%20%20%20D%20--%3E%7CSimple%7C%20E%5BFactory%20Method%5D%0A%20%20%20%20D%20--%3E%7CComplex%20Parameters%7C%20F%5BBuilder%5D%0A%20%20%20%20D%20--%3E%7CFamily%20of%20Objects%7C%20G%5BAbstract%20Factory%5D%0A%20%20%20%20D%20--%3E%7CCopy%20Existing%7C%20H%5BPrototype%5D%0A"})]),fallback:e(()=>[...t[4]||(t[4]=[a(" Loading... ",-1)])]),_:1}))]),t[13]||(t[13]=d("h4",{id:"structural-problems",tabindex:"-1"},[a("Structural Problems "),d("a",{class:"header-anchor",href:"#structural-problems","aria-label":'Permalink to "Structural Problems"'},"​")],-1)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-387",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Aflowchart%20TD%0A%20%20%20%20A%5BStructural%20Issue%5D%20--%3E%20B%7BWhat's%20the%20problem%3F%7D%0A%20%20%20%20B%20--%3E%7CIncompatible%20Interfaces%7C%20C%5BAdapter%5D%0A%20%20%20%20B%20--%3E%7CNeed%20to%20Add%20Behavior%7C%20D%5BDecorator%5D%0A%20%20%20%20B%20--%3E%7CToo%20Complex%7C%20E%5BFacade%5D%0A%20%20%20%20B%20--%3E%7CTree%2FHierarchical%20Data%7C%20F%5BComposite%5D%0A%20%20%20%20B%20--%3E%7CSeparate%20Abstraction%7C%20G%5BBridge%5D%0A%20%20%20%20B%20--%3E%7CToo%20Many%20Objects%7C%20H%5BFlyweight%5D%0A%20%20%20%20B%20--%3E%7CControl%20Access%7C%20I%5BProxy%5D%0A"})]),fallback:e(()=>[...t[5]||(t[5]=[a(" Loading... ",-1)])]),_:1})),t[14]||(t[14]=d("h4",{id:"behavioral-problems",tabindex:"-1"},[a("Behavioral Problems "),d("a",{class:"header-anchor",href:"#behavioral-problems","aria-label":'Permalink to "Behavioral Problems"'},"​")],-1)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-391",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Aflowchart%20TD%0A%20%20%20%20A%5BBehavior%20Issue%5D%20--%3E%20B%7BWhat's%20needed%3F%7D%0A%20%20%20%20B%20--%3E%7CNotify%20Multiple%20Objects%7C%20C%5BObserver%5D%0A%20%20%20%20B%20--%3E%7CChoose%20Algorithm%7C%20D%5BStrategy%5D%0A%20%20%20%20B%20--%3E%7CEncapsulate%20Requests%7C%20E%5BCommand%5D%0A%20%20%20%20B%20--%3E%7CState-based%20Behavior%7C%20F%5BState%5D%0A%20%20%20%20B%20--%3E%7CProcess%20Chain%7C%20G%5BChain%20of%20Responsibility%5D%0A%20%20%20%20B%20--%3E%7CComplex%20Communication%7C%20H%5BMediator%5D%0A"})]),fallback:e(()=>[...t[6]||(t[6]=[a(" Loading... ",-1)])]),_:1})),t[15]||(t[15]=l('<h2 id="🎯-popular-pattern-combinations" tabindex="-1">🎯 Popular Pattern Combinations <a class="header-anchor" href="#🎯-popular-pattern-combinations" aria-label="Permalink to &quot;🎯 Popular Pattern Combinations&quot;">​</a></h2><h3 id="model-view-controller-mvc" tabindex="-1">Model-View-Controller (MVC) <a class="header-anchor" href="#model-view-controller-mvc" aria-label="Permalink to &quot;Model-View-Controller (MVC)&quot;">​</a></h3><ul><li><strong>Observer</strong>: View observes Model</li><li><strong>Strategy</strong>: Controller strategies</li><li><strong>Composite</strong>: View hierarchies</li></ul><h3 id="enterprise-applications" tabindex="-1">Enterprise Applications <a class="header-anchor" href="#enterprise-applications" aria-label="Permalink to &quot;Enterprise Applications&quot;">​</a></h3><ul><li><strong>Factory Method</strong>: Create business objects</li><li><strong>Decorator</strong>: Add cross-cutting concerns</li><li><strong>Command</strong>: Encapsulate business operations</li><li><strong>Observer</strong>: Event-driven architecture</li></ul><h3 id="game-development" tabindex="-1">Game Development <a class="header-anchor" href="#game-development" aria-label="Permalink to &quot;Game Development&quot;">​</a></h3><ul><li><strong>State</strong>: Character states</li><li><strong>Observer</strong>: Game events</li><li><strong>Command</strong>: Player actions</li><li><strong>Flyweight</strong>: Game objects</li></ul><h2 id="🛠️-implementation-guidelines" tabindex="-1">🛠️ Implementation Guidelines <a class="header-anchor" href="#🛠️-implementation-guidelines" aria-label="Permalink to &quot;🛠️ Implementation Guidelines&quot;">​</a></h2><h3 id="when-to-use-patterns" tabindex="-1">When to Use Patterns <a class="header-anchor" href="#when-to-use-patterns" aria-label="Permalink to &quot;When to Use Patterns&quot;">​</a></h3><p>✅ <strong>DO use patterns when:</strong></p><ul><li>You have a recurring design problem</li><li>The pattern fits naturally</li><li>It improves code maintainability</li><li>Team understands the pattern</li></ul><p>❌ <strong>DON&#39;T use patterns when:</strong></p><ul><li>The problem is simple</li><li>It adds unnecessary complexity</li><li>You&#39;re forcing a pattern to fit</li><li>Team is unfamiliar with the pattern</li></ul><h3 id="anti-patterns-to-avoid" tabindex="-1">Anti-Patterns to Avoid <a class="header-anchor" href="#anti-patterns-to-avoid" aria-label="Permalink to &quot;Anti-Patterns to Avoid&quot;">​</a></h3><ul><li><strong>Golden Hammer</strong>: Using same pattern everywhere</li><li><strong>Over-Engineering</strong>: Using complex patterns for simple problems</li><li><strong>Pattern Fever</strong>: Using patterns just to use them</li><li><strong>Copy-Paste Patterns</strong>: Not understanding the pattern before using</li></ul><h2 id="📊-pattern-comparison-matrix" tabindex="-1">📊 Pattern Comparison Matrix <a class="header-anchor" href="#📊-pattern-comparison-matrix" aria-label="Permalink to &quot;📊 Pattern Comparison Matrix&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Pattern</th><th>Complexity</th><th>Flexibility</th><th>Performance</th><th>Use Frequency</th></tr></thead><tbody><tr><td>Singleton</td><td>Low</td><td>Low</td><td>High</td><td>High</td></tr><tr><td>Factory Method</td><td>Medium</td><td>High</td><td>Medium</td><td>High</td></tr><tr><td>Observer</td><td>Medium</td><td>High</td><td>Medium</td><td>High</td></tr><tr><td>Strategy</td><td>Low</td><td>High</td><td>High</td><td>High</td></tr><tr><td>Decorator</td><td>Medium</td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td>Command</td><td>Medium</td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td>Adapter</td><td>Low</td><td>Medium</td><td>High</td><td>Medium</td></tr><tr><td>Facade</td><td>Low</td><td>Low</td><td>High</td><td>Medium</td></tr></tbody></table><h2 id="🎓-learning-path" tabindex="-1">🎓 Learning Path <a class="header-anchor" href="#🎓-learning-path" aria-label="Permalink to &quot;🎓 Learning Path&quot;">​</a></h2><h3 id="beginner-path-start-here" tabindex="-1">Beginner Path (Start Here) <a class="header-anchor" href="#beginner-path-start-here" aria-label="Permalink to &quot;Beginner Path (Start Here)&quot;">​</a></h3><ol><li><strong>Singleton</strong> - Understand the concept of patterns</li><li><strong>Factory Method</strong> - Learn about object creation</li><li><strong>Observer</strong> - Understand behavioral patterns</li><li><strong>Strategy</strong> - Learn algorithm selection</li><li><strong>Decorator</strong> - Understand structural composition</li></ol><h3 id="intermediate-path" tabindex="-1">Intermediate Path <a class="header-anchor" href="#intermediate-path" aria-label="Permalink to &quot;Intermediate Path&quot;">​</a></h3><ol><li><strong>Builder</strong> - Complex object creation</li><li><strong>Adapter</strong> - Interface integration</li><li><strong>Command</strong> - Request encapsulation</li><li><strong>State</strong> - State-dependent behavior</li><li><strong>Facade</strong> - System simplification</li></ol><h3 id="advanced-path" tabindex="-1">Advanced Path <a class="header-anchor" href="#advanced-path" aria-label="Permalink to &quot;Advanced Path&quot;">​</a></h3><ol><li><strong>Abstract Factory</strong> - Complex creation patterns</li><li><strong>Proxy</strong> - Access control patterns</li><li><strong>Visitor</strong> - Complex behavioral patterns</li><li><strong>Mediator</strong> - Communication patterns</li><li><strong>Flyweight</strong> - Performance optimization</li></ol><h2 id="🔗-pattern-relationships" tabindex="-1">🔗 Pattern Relationships <a class="header-anchor" href="#🔗-pattern-relationships" aria-label="Permalink to &quot;🔗 Pattern Relationships&quot;">​</a></h2>',25)),(r(),i(s,null,{default:e(()=>[n(o,{id:"mermaid-804",class:"mermaid my-class",graph:"%25%25%7Binit%3A%20%7B'theme'%3A%20'default'%7D%7D%25%25%0Agraph%20TB%0A%20%20%20%20subgraph%20%22Often%20Used%20Together%22%0A%20%20%20%20%20%20%20%20A%5BObserver%5D%20--%3E%20B%5BCommand%5D%0A%20%20%20%20%20%20%20%20C%5BAbstract%20Factory%5D%20--%3E%20D%5BFactory%20Method%5D%0A%20%20%20%20%20%20%20%20E%5BComposite%5D%20--%3E%20F%5BVisitor%5D%0A%20%20%20%20%20%20%20%20G%5BStrategy%5D%20--%3E%20H%5BTemplate%20Method%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Similar%20Purpose%22%0A%20%20%20%20%20%20%20%20I%5BBridge%5D%20-.-%3E%20J%5BAdapter%5D%0A%20%20%20%20%20%20%20%20K%5BDecorator%5D%20-.-%3E%20L%5BProxy%5D%0A%20%20%20%20%20%20%20%20M%5BFactory%20Method%5D%20-.-%3E%20N%5BAbstract%20Factory%5D%0A%20%20%20%20end%0A"})]),fallback:e(()=>[...t[7]||(t[7]=[a(" Loading... ",-1)])]),_:1})),t[16]||(t[16]=l('<h2 id="📚-further-reading" tabindex="-1">📚 Further Reading <a class="header-anchor" href="#📚-further-reading" aria-label="Permalink to &quot;📚 Further Reading&quot;">​</a></h2><ul><li><p><strong>Books</strong>:</p><ul><li>&quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; by Gang of Four</li><li>&quot;Head First Design Patterns&quot; by Freeman &amp; Robson</li><li>&quot;Patterns of Enterprise Application Architecture&quot; by Martin Fowler</li></ul></li><li><p><strong>Online Resources</strong>:</p><ul><li>Refactoring.Guru Design Patterns</li><li>SourceMaking Design Patterns</li><li>DoFactory Design Pattern Framework</li></ul></li></ul><h2 id="🎯-quick-reference" tabindex="-1">🎯 Quick Reference <a class="header-anchor" href="#🎯-quick-reference" aria-label="Permalink to &quot;🎯 Quick Reference&quot;">​</a></h2><h3 id="most-common-patterns-80-20-rule" tabindex="-1">Most Common Patterns (80/20 Rule) <a class="header-anchor" href="#most-common-patterns-80-20-rule" aria-label="Permalink to &quot;Most Common Patterns (80/20 Rule)&quot;">​</a></h3><ol><li><strong>Singleton</strong> - Single instance</li><li><strong>Factory Method</strong> - Object creation</li><li><strong>Observer</strong> - Event notification</li><li><strong>Strategy</strong> - Algorithm selection</li><li><strong>Decorator</strong> - Add behavior</li><li><strong>Command</strong> - Encapsulate requests</li><li><strong>Adapter</strong> - Interface conversion</li><li><strong>Facade</strong> - Simplify interface</li></ol><hr>',6))])}const y=h(u,[["render",p]]);export{P as __pageData,y as default};
