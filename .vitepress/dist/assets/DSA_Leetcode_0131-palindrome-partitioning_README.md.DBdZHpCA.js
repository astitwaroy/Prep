import{_ as o,c as e,o as n,ag as a}from"./chunks/framework.DUDLMHYb.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/0131-palindrome-partitioning/README.md","filePath":"DSA/Leetcode/0131-palindrome-partitioning/README.md"}'),r={name:"DSA/Leetcode/0131-palindrome-partitioning/README.md"};function s(p,t,i,l,d,u){return n(),e("div",null,[...t[0]||(t[0]=[a(`<h2><a href="https://leetcode.com/problems/palindrome-partitioning">131. Palindrome Partitioning</a></h2><h3>Medium</h3><hr><p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword="substring-nonempty">substring</span> of the partition is a <span data-keyword="palindrome-string"><strong>palindrome</strong></span>. Return <em>all possible palindrome partitioning of </em><code>s</code>.</p><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> s = &quot;aab&quot;
<strong>Output:</strong> [[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> s = &quot;a&quot;
<strong>Output:</strong> [[&quot;a&quot;]]
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> contains only lowercase English letters.</li></ul>`,12)])])}const m=o(r,[["render",s]]);export{g as __pageData,m as default};
