import{_ as s,c as o,o as n,ag as t}from"./chunks/framework.DUDLMHYb.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3646-sum-of-good-subsequences/README.md","filePath":"DSA/Leetcode/3646-sum-of-good-subsequences/README.md"}'),c={name:"DSA/Leetcode/3646-sum-of-good-subsequences/README.md"};function r(a,e,d,p,u,l){return n(),o("div",null,[...e[0]||(e[0]=[t('<h2><a href="https://leetcode.com/problems/sum-of-good-subsequences">3646. Sum of Good Subsequences</a></h2><h3>Hard</h3><hr><p>You are given an integer array <code>nums</code>. A <strong>good subsequence</strong> is defined as a subsequence of <code>nums</code> where the absolute difference between any <strong>two</strong> consecutive elements in the subsequence is <strong>exactly</strong> 1.</p><p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p><p>Return the <strong>sum</strong> of all <em>possible</em> <strong>good subsequences</strong> of <code>nums</code>.</p><p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><p><strong>Note </strong>that a subsequence of size 1 is considered good by definition.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [1,2,1]</span></p><p><strong>Output:</strong> <span class="example-io">14</span></p><p><strong>Explanation:</strong></p><ul><li>Good subsequences are: <code>[1]</code>, <code>[2]</code>, <code>[1]</code>, <code>[1,2]</code>, <code>[2,1]</code>, <code>[1,2,1]</code>.</li><li>The sum of elements in these subsequences is 14.</li></ul></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [3,4,5]</span></p><p><strong>Output:</strong> <span class="example-io">40</span></p><p><strong>Explanation:</strong></p><ul><li>Good subsequences are: <code>[3]</code>, <code>[4]</code>, <code>[5]</code>, <code>[3,4]</code>, <code>[4,5]</code>, <code>[3,4,5]</code>.</li><li>The sum of elements in these subsequences is 40.</li></ul></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li><li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li></ul>',16)])])}const m=s(c,[["render",r]]);export{g as __pageData,m as default};
