import{_ as e,c as t,o as a,ag as c}from"./chunks/framework.DUDLMHYb.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3451-string-compression-iii/README.md","filePath":"DSA/Leetcode/3451-string-compression-iii/README.md"}'),d={name:"DSA/Leetcode/3451-string-compression-iii/README.md"};function i(r,o,n,p,s,l){return a(),t("div",null,[...o[0]||(o[0]=[c('<h2 id="_3451-string-compression-iii" tabindex="-1">3451. String Compression III <a class="header-anchor" href="#_3451-string-compression-iii" aria-label="Permalink to &quot;3451. String Compression III&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>Given a string <code>word</code>, compress it using the following algorithm:</p><ul><li>Begin with an empty string <code>comp</code>. While <code>word</code> is <strong>not</strong> empty, use the following operation: <ul><li>Remove a maximum length prefix of <code>word</code> made of a <em>single character</em> <code>c</code> repeating <strong>at most</strong> 9 times.</li><li>Append the length of the prefix followed by <code>c</code> to <code>comp</code>.</li></ul></li></ul><p>Return the string <code>comp</code>.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>word = &quot;abcde&quot;</code></p><p><strong>Output:</strong> <code>&quot;1a1b1c1d1e&quot;</code></p><p><strong>Explanation:</strong></p><p>Initially, <code>comp = &quot;&quot;</code>. Apply the operation 5 times, choosing <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;c&quot;</code>, <code>&quot;d&quot;</code>, and <code>&quot;e&quot;</code> as the prefix in each operation.</p><p>For each prefix, append <code>&quot;1&quot;</code> followed by the character to <code>comp</code>.</p><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>word = &quot;aaaaaaaaaaaaaabb&quot;</code></p><p><strong>Output:</strong> <code>&quot;9a5a2b&quot;</code></p><p><strong>Explanation:</strong></p><p>Initially, <code>comp = &quot;&quot;</code>. Apply the operation 3 times, choosing <code>&quot;aaaaaaaaa&quot;</code>, <code>&quot;aaaaa&quot;</code>, and <code>&quot;bb&quot;</code> as the prefix in each operation.</p><ul><li>For prefix <code>&quot;aaaaaaaaa&quot;</code>, append <code>&quot;9&quot;</code> followed by <code>&quot;a&quot;</code> to <code>comp</code>.</li><li>For prefix <code>&quot;aaaaa&quot;</code>, append <code>&quot;5&quot;</code> followed by <code>&quot;a&quot;</code> to <code>comp</code>.</li><li>For prefix <code>&quot;bb&quot;</code>, append <code>&quot;2&quot;</code> followed by <code>&quot;b&quot;</code> to <code>comp</code>.</li></ul><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>1 &lt;= word.length &lt;= 2 * 10^5</code></li><li><code>word</code> consists only of lowercase English letters.</li></ul>',20)])])}const m=e(d,[["render",i]]);export{q as __pageData,m as default};
