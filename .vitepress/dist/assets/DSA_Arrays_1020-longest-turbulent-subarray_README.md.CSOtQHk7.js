import{_ as r,c as a,o as t,ag as o}from"./chunks/framework.DUDLMHYb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/1020-longest-turbulent-subarray/README.md","filePath":"DSA/Arrays/1020-longest-turbulent-subarray/README.md"}'),l={name:"DSA/Arrays/1020-longest-turbulent-subarray/README.md"};function n(s,e,d,i,c,u){return t(),a("div",null,[...e[0]||(e[0]=[o('<h2 id="_1020-longest-turbulent-subarray" tabindex="-1">1020. Longest Turbulent Subarray <a class="header-anchor" href="#_1020-longest-turbulent-subarray" aria-label="Permalink to &quot;1020. Longest Turbulent Subarray&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>Given an integer array <code>arr</code>, return <em>the length of a maximum size turbulent subarray of</em> <code>arr</code>.</p><p>A subarray is <strong>turbulent</strong> if the comparison sign flips between each adjacent pair of elements in the subarray.</p><p>More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code> of <code>arr</code> is said to be turbulent if and only if:</p><ul><li>For <code>i &lt;= k &lt; j</code>: <ul><li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd, and</li><li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.</li></ul></li><li>Or, for <code>i &lt;= k &lt; j</code>: <ul><li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even, and</li><li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.</li></ul></li></ul><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>arr = [9,4,2,10,7,8,8,1,9]</code></p><p><strong>Output:</strong> <code>5</code></p><p><strong>Explanation:</strong> <code>arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]</code></p><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>arr = [4,8,12,16]</code></p><p><strong>Output:</strong> <code>2</code></p><h3 id="example-3" tabindex="-1">Example 3: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3:&quot;">​</a></h3><p><strong>Input:</strong> <code>arr = [100]</code></p><p><strong>Output:</strong> <code>1</code></p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>1 &lt;= arr.length &lt;= 4 * 10^4</code></li><li><code>0 &lt;= arr[i] &lt;= 10^9</code></li></ul>',19)])])}const g=r(l,[["render",n]]);export{h as __pageData,g as default};
