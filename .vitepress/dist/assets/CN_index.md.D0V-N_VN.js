import{_ as c,C as h,c as u,o as a,a4 as n,b as s,j as t,w as o,a as i,G as l,a5 as d}from"./chunks/framework.BTsuxa0O.js";const m="/Prep/assets/image.upcsZYUg.png",p="/Prep/assets/image-1.CoOcW27X.png",g="/Prep/assets/image-3.7Af-UAyo.png",f="/Prep/assets/image-4.BoS-fM4R.png",b="/Prep/assets/image-5.CbBc1C2W.png",y="/Prep/assets/image-6.DdwhI_uT.png",w="/Prep/assets/image-7.BdrpjkqP.png",k="/Prep/assets/image-8.BgGk9LIb.png",v="/Prep/assets/image-9.Dl6D_yUW.png",P="/Prep/assets/image-10.guNj4be9.png",q="/Prep/assets/image-11.CcbF1Fhh.png",T="/Prep/assets/image-12.DkkVRZgB.png",A="/Prep/assets/image-13.CyIau5tE.png",I="/Prep/assets/image-14.cGPtPaBL.png",S="/Prep/assets/image-15.DMpegcvE.png",C="/Prep/assets/image-16.qIoZ8sAE.png",x="/Prep/assets/image-17.BUnL2jw4.png",D="/Prep/assets/image-18.BV38OIul.png",N="/Prep/assets/image-19.mAv5HqXh.png",_="/Prep/assets/image-20.Du43warc.png",M="/Prep/assets/image-21.C89VReHR.png",R="/Prep/assets/image-22.DuAvoFkU.png",E="/Prep/assets/image-23.lfOB0iWd.png",B="/Prep/assets/image-24.DzvZjmMY.png",z=JSON.parse('{"title":"Computer Network","description":"","frontmatter":{},"headers":[],"relativePath":"CN/index.md","filePath":"CN/index.md"}'),L={name:"CN/index.md"};function F(W,e,O,U,V,j){const r=h("Mermaid");return a(),u("div",null,[e[14]||(e[14]=n('<blockquote><h3 id="author-anil-kumar" tabindex="-1">Author : Anil Kumar <a class="header-anchor" href="#author-anil-kumar" aria-label="Permalink to &quot;Author : Anil Kumar&quot;">​</a></h3></blockquote><h1 id="computer-network" tabindex="-1"><h1 align="center"> Computer Network </h1> <a class="header-anchor" href="#computer-network" aria-label="Permalink to &quot;&lt;h1 align=&quot;center&quot;&gt; Computer Network &lt;/h1&gt;&quot;">​</a></h1><hr><ul><li><strong>Network:</strong> A network is a set of devices connected by communication meduim.</li><li><strong>Computer Network:</strong> A computer network is a system that connects multiple devices—like computers, servers, or smartphones—so they can communicate, share data, and resources efficiently. It is the backbone of the digital world. Every time you send a WhatsApp message, stream Netflix, or make a UPI payment, you’re using a computer network.</li><li><strong>Data Communications:</strong> exchange of data between two devices via transmission medium.</li></ul><h2 id="communication-protocol" tabindex="-1">Communication Protocol <a class="header-anchor" href="#communication-protocol" aria-label="Permalink to &quot;Communication Protocol&quot;">​</a></h2>',5)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-29",class:"mermaid my-class",graph:"%20%20flowchart%20LR%0A%20%20%20%20Sender%5BSender%5D%20%3C-------%3E%7C%20Communication%20Medium%20%7C%20Receiver%5BReceiver%5D%0A%0A"})]),fallback:o(()=>[...e[0]||(e[0]=[i(" Loading... ",-1)])]),_:1})),e[15]||(e[15]=n('<div style="background-color:#b15b21;padding:10px;border-radius:8px;font-weight:bold;width:fit-content;margin:20px auto;text-align:center;"> Both sender and receiver follow the protocol. </div><hr><blockquote><h3 id="five-components-of-data-communication" tabindex="-1">Five Components of Data Communication <a class="header-anchor" href="#five-components-of-data-communication" aria-label="Permalink to &quot;Five Components of Data Communication&quot;">​</a></h3></blockquote><ol><li>Message</li><li>Sender</li><li>Receiver</li><li>Medium</li><li>Protocol</li></ol><ul><li><strong>Protocol:</strong> A protocol is set of rules that govern data communications. It is like an agreement between communicating devices. Without a protocol, two devices may be connected but cannot communicate, just like a person cannot understand Assamese who speaks only Tamil</li></ul><blockquote><h3 id="during-data-communication-data-flow-is-of-3-type" tabindex="-1">During data communication, data flow is of 3 type: <a class="header-anchor" href="#during-data-communication-data-flow-is-of-3-type" aria-label="Permalink to &quot;During data communication, data flow is of 3 type:&quot;">​</a></h3></blockquote><div align="center"><p><img src="'+m+'" alt="alt text"></p></div><ul><li>type of connection between them : point to point, multipoint</li></ul><table tabindex="0"><thead><tr><th>Connection Type</th><th>Description</th><th>Real-life Example</th></tr></thead><tbody><tr><td>Point-to-Point</td><td>Entire capacity of the link is reserved for transmission between two devices</td><td>Telephone call between two people</td></tr><tr><td>Multipoint</td><td>More than two devices share a common link</td><td>Classroom with one teacher and many students</td></tr></tbody></table><blockquote><h3 id="goals-of-the-network" tabindex="-1">Goals of the network <a class="header-anchor" href="#goals-of-the-network" aria-label="Permalink to &quot;Goals of the network&quot;">​</a></h3></blockquote><ol><li>Performance</li><li>Reliability</li><li>Security</li></ol><hr><blockquote><h1 id="but-how-the-network-in-real-life-look-likes" tabindex="-1">but how the network in real life look likes <a class="header-anchor" href="#but-how-the-network-in-real-life-look-likes" aria-label="Permalink to &quot;but how the network in real life look likes&quot;">​</a></h1></blockquote><div align="center"><p><img src="'+p+'" alt="alt text"></p></div><ul><li><p><strong>Physical Topology</strong>: The term physical topology refers to the way in which a network is laid out physically.</p></li><li><p><strong>Mesh Topology</strong><br> Every device has a dedicated point-to-point link to every other device.</p></li><li><p><strong>Star Topology</strong></p><ul><li>Each device has a dedicated point-to-point link only to a central controller, usually called a hub.</li><li>If a device wants to send data to another device, it sends the data to hub, which relays the data to another connected device.</li></ul></li><li><p><strong>Bus Topology</strong></p><ul><li>Bus topology uses multipoint connections.</li><li>Nodes are connected to the bus cable by drop lines (connection running between device and the main cable)and taps (connector).</li></ul></li><li><p><strong>Ring Topology</strong><br> Each device has a dedicated point-to point with only two devices on either side of it.</p></li></ul><hr><blockquote><h3 id="categories-of-networks" tabindex="-1">Categories of Networks <a class="header-anchor" href="#categories-of-networks" aria-label="Permalink to &quot;Categories of Networks&quot;">​</a></h3></blockquote><h3 id="types-of-networks" tabindex="-1">Types of Networks <a class="header-anchor" href="#types-of-networks" aria-label="Permalink to &quot;Types of Networks&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Network Type</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>Local Area Network (LAN)</td><td>Usually privately owned and links devices in a single office, building, or campus.</td><td>Our campus network</td></tr><tr><td>Metropolitan Area Network (MAN)</td><td>Covers a town or a city, designed for customers who need high-speed connectivity.</td><td>Cable TV network</td></tr><tr><td>Wide Area Network (WAN)</td><td>Provides long-distance transmission of data, image, audio, and video over large geographic areas (country, continent, or even the planet).</td><td>Internet backbone, telecom networks</td></tr><tr><td>Internet</td><td>When two or more networks (LAN, MAN, WAN) are connected, they become an internetwork or Internet.</td><td>The global Internet</td></tr></tbody></table><ul><li><strong>👉 Standard:</strong> A set of agreed rules or guidelines made by organizations(like IEEE, ISO, ITU, ANSI) so that different devices and systems can work together</li></ul><hr><h1 id="osi-model" tabindex="-1"><p align="center"> OSI Model</p> <a class="header-anchor" href="#osi-model" aria-label="Permalink to &quot;&lt;p align=&quot;center&quot;&gt; OSI Model&lt;/p&gt;&quot;">​</a></h1><ul><li><p>ISO is the organization. OSI is the model.</p></li><li><p>An ISO standard that covers all aspects ofnetwork communications is the Open Systems Interconnection model.</p></li><li><p>An <strong>open system</strong> lets two different computers talk to each other using common rules. The <strong>OSI model</strong> explains how this communication works without changing their hardware or software.</p></li></ul><blockquote><h3 id="layered-architecture-of-osi-model" tabindex="-1">Layered Architecture of OSI Model <a class="header-anchor" href="#layered-architecture-of-osi-model" aria-label="Permalink to &quot;Layered Architecture of OSI Model&quot;">​</a></h3></blockquote><div align="center"><p><img src="'+g+'" alt="alt text"></p></div><ul><li>Each layer in the sending device adds its own information to the message it receives from the layer just above it and passes the whole package to the layer just below it.</li></ul><blockquote><h3 id="physical-layer" tabindex="-1">Physical Layer <a class="header-anchor" href="#physical-layer" aria-label="Permalink to &quot;Physical Layer&quot;">​</a></h3></blockquote><ul><li>Main Responsibility: The physical layer is concerned with transmitting raw bits over a communication medium/channel.</li></ul><div align="center"><p><img src="'+f+'" alt="alt text"></p></div><ul><li>It also define the type of transmission media.</li><li>The physical layer data consists of a stream of bits (sequence of 0s and 1s) with no interpretation(explanation).</li><li><strong>Data Rate</strong>: The number of bits transmitted per second is also specified by the physical layer.</li><li>Bit synchronization at the physical layer ensures sender and receiver agree on timing so that each bit (0 or 1) is correctly recognized. Without it, bits would get misread, causing data corruption.</li><li>It also defines the Line configuration, Physical topology,Transmission mode.</li></ul><blockquote><h3 id="data-link-layer" tabindex="-1">Data Link Layer <a class="header-anchor" href="#data-link-layer" aria-label="Permalink to &quot;Data Link Layer&quot;">​</a></h3></blockquote><ul><li><strong>Main Responsibility</strong>: It makes physical layer appear error-free to the network layer.</li></ul><div align="center"><p><img src="'+b+'" alt="alt text"></p></div><table tabindex="0"><thead><tr><th>Feature</th><th>Hop-to-Hop Delivery</th><th>End-to-End Delivery</th></tr></thead><tbody><tr><td><strong>OSI Layer</strong></td><td>Data Link Layer</td><td>Network Layer</td></tr><tr><td><strong>Scope</strong></td><td>Delivery from one node(router,switch..) to the next (one link)</td><td>Delivery from source device to destination device</td></tr><tr><td><strong>Responsibility</strong></td><td>Ensures a frame is delivered to the next hop</td><td>Ensures a packet is delivered across the entire path</td></tr><tr><td><strong>Unit of Data</strong></td><td>Frame</td><td>Packet</td></tr><tr><td><strong>Reliability</strong></td><td>Checks errors at each link (e.g., CRC)</td><td>Ensures packet reaches the correct destination</td></tr><tr><td><strong>Example</strong></td><td>PC → Switch, Switch → Router</td><td>Client → Web Server across the Internet</td></tr></tbody></table><blockquote><p>Why Both Hop-to-Hop and End-to-End Delivery are Needed?</p><ul><li>We need both because hop-to-hop checks each step of the journey, while end-to-end makes sure the whole message reaches the destination. Together, they keep communication reliable and complete.</li></ul></blockquote><ul><li><p><strong>Framing</strong>: The data link layer divides the stream of bits received from the network layer into manageable data units called frames.</p></li><li><p><strong>Flow control</strong>: If the rate at which the data are absorbed by the receiver is less than the rate at which data are produced in the sender, the data link layer imposes a flow control mechanism to avoid overloading of receiver.</p></li><li><p>A trailer is added to the end of frame for error control.</p></li><li><p><strong>Access control</strong>: When two or more devices are connected to the same link, data link layer protocols determine which device has control over the link at any given time.</p></li></ul><blockquote><h3 id="network-layer" tabindex="-1">Network Layer <a class="header-anchor" href="#network-layer" aria-label="Permalink to &quot;Network Layer&quot;">​</a></h3></blockquote><ul><li><strong>MainResponsibility</strong>: The network is responsible for the source-to destination delivery of packet, possibly across multiple networks (links).</li></ul><div align="center"><p><img src="'+y+'" alt="alt text"></p></div><ul><li><strong>Logical Addressing</strong>: If packet passes the network boundary, we need another addressing system to help distinguish the source and destination systems.</li></ul><blockquote><p>Q: If the Data Link layer can deliver packets using MAC addresses, why do we need logical addressing (IP addresses) in the Network layer?</p><ul><li>MAC addresses work only inside a local network (e.g., your laptop to a printer via a switch). But if you send data to a server in another country, the packet must cross many networks. Here, the IP address (logical address) guides routers to deliver data end-to-end, just like a full postal address across cities.</li></ul></blockquote><ul><li><strong>Routing</strong>: When independent networks or links are connected to form internetwork (network of networks), the connecting devices (called routers or switches) routes or switch the packets to their final destination. The network layer ensures this mechanism for source-to-destination delivery.</li></ul><blockquote><h3 id="transport-layer" tabindex="-1">Transport Layer <a class="header-anchor" href="#transport-layer" aria-label="Permalink to &quot;Transport Layer&quot;">​</a></h3></blockquote><ul><li><strong>Main Responsibility</strong>: The transport layer is responsible for process-to-process delivery of the entire message in segments.</li></ul><div align="center"><p><img src="'+w+'" alt="alt text"></p></div><ul><li><p><strong>Service-point addressing</strong>:Since computers often run multiple programs at the same time, source-to-destination delivery means not only sending data from the source computer to the destination computer, but also ensuring delivery from a specific process (running program) on one computer to the corresponding process on the other.</p></li><li><p><strong>Segmentation</strong>: A message is divided into transmittable segments, with each segment containing a sequence number.</p></li><li><p>Transport Layer can be either connectionless and connection-oriented. is its connectionless then segments are individually sent to destination.but if its connection oriented transport layer needs to make first connection with transport layer of the destination machine before delivering data.</p></li><li><p><strong>Flow Control</strong>:like data link layer flow control does&#39;t happen at each hop, in this layer flow control heppen end-to-end.</p></li><li><p><strong>Error Control</strong>: error control perfromed process to process.</p></li></ul><blockquote><h3 id="session-layer" tabindex="-1">Session Layer <a class="header-anchor" href="#session-layer" aria-label="Permalink to &quot;Session Layer&quot;">​</a></h3></blockquote><ul><li><p><strong>Main Responsibility</strong>: The session layer is responsible for dialog control and synchronization.</p></li><li><p><strong>Dialog Control</strong>:Dialog control is the function of the session layer in networking that manages who can talk, when, and for how long in a communication between two devices.</p></li><li><p><strong>Synchronization</strong>:This Layer allow to add check point to a stream of data. if a crash happens then requires to transmit only those data after the recent check point.</p></li></ul><blockquote><h3 id="presentation-layer" tabindex="-1">Presentation Layer: <a class="header-anchor" href="#presentation-layer" aria-label="Permalink to &quot;Presentation Layer:&quot;">​</a></h3></blockquote><ul><li><p><strong>Main Responsibility</strong>: The presentation layer is responsible for translation, compression and encryption.</p></li><li><p><strong>Translation</strong>: The presentation layer at the sender changes the information from its sender dependent format into a common format.</p></li><li><p><strong>Encryption</strong>:Encryption means that the sender transforms the original information to another form and sends the resulting message out over the network.</p></li><li><p><strong>Compression</strong>: Data compressing reduces the number of bits contained in the information.</p></li></ul><blockquote><p><strong>Application Layer</strong>: The application layer is responsible for providing services to the user.</p></blockquote><blockquote><p><strong>Application Layer</strong>: The application layer is responsible for providing services to the user.</p></blockquote><ul><li><strong>Network Virtual Terminal(NVT)</strong>:NVT is a universal standard text format in Telnet, acting like a common language so different computers can talk without worrying about their internal representation.</li><li>Some service also there like file transfer ,mail service.</li></ul><hr><blockquote><h2 id="tcp-ip-protocol-suite" tabindex="-1"><strong>TCP/IP protocol Suite</strong>: <a class="header-anchor" href="#tcp-ip-protocol-suite" aria-label="Permalink to &quot;**TCP/IP protocol Suite**:&quot;">​</a></h2></blockquote><ul><li>TCP/IP do not exactly match those in OSI model,it defined as having four layers:</li></ul><ol><li>Application</li><li>Transport</li><li>Internet</li><li>host to network</li></ol><h1 id="difference-between-tcp-ip-and-osi-model" tabindex="-1">Difference between TCP/IP and OSI Model <a class="header-anchor" href="#difference-between-tcp-ip-and-osi-model" aria-label="Permalink to &quot;Difference between TCP/IP and OSI Model&quot;">​</a></h1><table tabindex="0"><thead><tr><th>Aspect</th><th>OSI Model (7 Layers)</th><th>TCP/IP Model (4 Layers)</th></tr></thead><tbody><tr><td><strong>Full Form</strong></td><td>Open Systems Interconnection</td><td>Transmission Control Protocol / Internet Protocol</td></tr><tr><td><strong>Developed By</strong></td><td>ISO (International Organization for Standardization)</td><td>DARPA (Defense Advanced Research Projects Agency)</td></tr><tr><td><strong>Layers</strong></td><td>7 Layers: Application, Presentation, Session, Transport, Network, Data Link, Physical</td><td>4 Layers: Application, Transport, Internet, Network Access</td></tr><tr><td><strong>Approach</strong></td><td>Theoretical, reference model</td><td>Practical, protocol-oriented model</td></tr><tr><td><strong>Application Layer</strong></td><td>Split into Application, Presentation, Session</td><td>Combined into a single Application layer</td></tr><tr><td><strong>Transport Layer</strong></td><td>Provides reliable (TCP) and unreliable (UDP) delivery</td><td>Provides both TCP (reliable) and UDP (unreliable)</td></tr><tr><td><strong>Network Layer</strong></td><td>Separate Network layer</td><td>Internet layer (similar role)</td></tr><tr><td><strong>Data Flow</strong></td><td>Defines what each layer <em>should</em> do (guideline)</td><td>Defines how protocols <em>actually work</em></td></tr><tr><td><strong>Protocol Dependency</strong></td><td>Protocol-independent</td><td>Protocol-specific (TCP, IP, UDP, etc.)</td></tr><tr><td><strong>Usage</strong></td><td>Used as a teaching and reference model</td><td>Used in real-world networking and the Internet</td></tr></tbody></table><ul><li>TCP/IP model has only connectionless mode in network layer but support both mode in transport layer, but when it comes to OSI model just opposite.</li></ul><blockquote><h3 id="ip-addressing" tabindex="-1">IP Addressing <a class="header-anchor" href="#ip-addressing" aria-label="Permalink to &quot;IP Addressing&quot;">​</a></h3></blockquote><div align="center"><p><img src="'+k+'" alt="alt text"></p></div><div align="center"><p><img src="'+v+'" alt="alt text"></p></div><ul><li>If we can have a common network id for all the node in a particular LAN then it will be better because router need not to maintain info of all the nodes.</li><li>But, we have to also identify the individual node. Therefore, we also require to have some way to get each node’s identity.</li><li>Thus, Internet Protocol (IP) divides the address (IPv4 address) into two parts: Network id and Host id *IPv4 has 32 bits address (4 bytes). Each byte is separated by a dot.</li></ul><blockquote><p>What do u know about NAT ?</p><ul><li>Network address translation(NAT) enables a user to have a large set of address internally(Private IP Address) and one address, or a small set of addresses, externally(public IP Address).</li></ul></blockquote><p>What do u know about NAT ?</p><ul><li>Network Address Translation (NAT) enables a user to have a large set of addresses internally (Private IP Address) and one address, or a small set of addresses, externally (Public IP Address).</li></ul><blockquote><p><strong>About Fragmentation</strong></p><ul><li>An IPv4 datagram (packet) can be as large as 65,535 bytes.</li><li>But not all physical networks (like Ethernet, Wi-Fi, etc.) can handle such a big packet.</li><li>Each physical network has a limit on packet size called MTU (Maximum Transmission Unit).</li><li>If a datagram is bigger than the MTU, it must be broken into smaller pieces so it can pass through.</li><li>This breaking process is called Fragmentation.</li></ul></blockquote><h1 id="difference-between-ipv4-and-ipv6" tabindex="-1">Difference between IPv4 and IPv6 <a class="header-anchor" href="#difference-between-ipv4-and-ipv6" aria-label="Permalink to &quot;Difference between IPv4 and IPv6&quot;">​</a></h1><table tabindex="0"><thead><tr><th>Feature</th><th>IPv4</th><th>IPv6</th></tr></thead><tbody><tr><td><strong>Address Size</strong></td><td>32-bit (≈ 4.3 billion addresses)</td><td>128-bit (≈ 3.4 × 10^38 addresses)</td></tr><tr><td><strong>Address Format</strong></td><td>Decimal, 4 numbers separated by dots (e.g., 192.168.1.1)</td><td>Hexadecimal, 8 groups separated by colons (e.g., 2001:0db8::1)</td></tr><tr><td><strong>Header</strong></td><td>Variable length (20–60 bytes)</td><td>Fixed length (40 bytes), simpler structure</td></tr><tr><td><strong>Configuration</strong></td><td>Manual or DHCP</td><td>Auto-configuration + DHCPv6 supported</td></tr><tr><td><strong>Security</strong></td><td>IPSec optional</td><td>IPSec built-in by default</td></tr><tr><td><strong>Broadcast</strong></td><td>Supports broadcast</td><td>No broadcast; uses multicast and anycast</td></tr><tr><td><strong>Fragmentation</strong></td><td>Done by both sender and routers</td><td>Done only by sender</td></tr><tr><td><strong>Address Classes</strong></td><td>Classful addressing (A, B, C, etc.), NAT used</td><td>Classless, hierarchical addressing, no NAT needed</td></tr><tr><td><strong>Advantages</strong></td><td>Limited addresses, complex header</td><td>Larger address space, better header, new options, extensions, stronger security</td></tr></tbody></table><ul><li><strong>Tunneling</strong>:It is a strategy used when two computers using IPv6 want to communicate with each other and the packet must pass through a region that uses IPv4.</li></ul><blockquote><h3 id="what-if-some-system-use-ipv4-but-majority-of-the-internet-has-moved-to-ipv6" tabindex="-1">What if some system use IPv4 but majority of the internet has moved to IPv6 ! <a class="header-anchor" href="#what-if-some-system-use-ipv4-but-majority-of-the-internet-has-moved-to-ipv6" aria-label="Permalink to &quot;What if some system use IPv4 but majority of the internet has moved to IPv6 !&quot;">​</a></h3><ul><li>Header translation: It is necessary when the majority of the Internet has moved to IPv6 but some systems still use IPv4.</li><li>The sender wants to use IPv6, but the receiver does not understand IPv6.</li></ul></blockquote><div align="center"><p><img src="'+P+'" alt="alt text"></p></div><ul><li>The header of the IPv6 packet is converted to an IPv4 header.</li></ul><blockquote><h2 id="analog-v-s-digital-signal" tabindex="-1">Analog v/s Digital Signal <a class="header-anchor" href="#analog-v-s-digital-signal" aria-label="Permalink to &quot;Analog v/s Digital Signal&quot;">​</a></h2><ul><li>Analog data is captured as continuous values. For instance, when someone speaks an analog wave is created in the air. This can be captured by a microphone and converted to an analog signalor sampled and converted to a digital signal.</li><li>Digital data is captured as discrete values. For instance, data stored in computer memory in the form of 0s and 1s. These can be converted to a digitalor modulated into an analog signal.</li><li>In data communications, we commonly use periodic analog signals and nonperiodic digital signals.</li></ul></blockquote><ul><li>Attenuation means a loss of energy.</li><li>Amplifiers are used to compensate for this loss of energy by amplifying the signal.</li><li><strong>Noise</strong> is an unwanted disturbance in an electrical signal.</li></ul><blockquote><h3 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h3><ul><li>One important issue in networking is the performanceof the network—how good is it?</li></ul><ol><li>Bandwidth</li><li>Throughput</li><li>Latency (Delay)</li><li>Bandwidth-Delay Product</li></ol></blockquote><ul><li><strong>Bandwidth</strong>:-bandwidth in bits per second, refers to the number of bits per second a channel, a link or even a network can transmit.</li><li><strong>Throughput</strong>:-The throughput is a measure of how fast we can actuallysend data through a network.</li></ul><blockquote><h3 id="delay" tabindex="-1">Delay <a class="header-anchor" href="#delay" aria-label="Permalink to &quot;Delay&quot;">​</a></h3><p>The latency or delay defines how long it takes for an entire message to completely arrive at the destination from the time the first bit is sent out from the source.</p><ol><li>propagation time</li><li>transmission time</li><li>queuing time</li><li>processing time</li></ol></blockquote><ul><li><strong>propagation time</strong>:- measures the time required for a bit to travel from the source to the destination.</li><li><strong>transmission time</strong>:-measures the time required for entire message to reach its destination.</li><li><strong>queuing time</strong>:-Queuing timeis the time needed for each intermediate or end device to hold the message before it can be processed.</li><li><strong>Processing time</strong>: the time required to process (eg. Error correction) the message at end device (receiver) or parts of message (eg. frames) at intermediate devices (eg. router).</li></ul><blockquote><h3 id="transmission-media" tabindex="-1">Transmission media <a class="header-anchor" href="#transmission-media" aria-label="Permalink to &quot;Transmission media&quot;">​</a></h3></blockquote><div align="center"><p><img src="'+q+'" alt="alt text"></p></div><blockquote><h3 id="error-detection-vs-error-correction" tabindex="-1">Error Detection vs. Error Correction <a class="header-anchor" href="#error-detection-vs-error-correction" aria-label="Permalink to &quot;Error Detection vs. Error Correction&quot;">​</a></h3></blockquote>',83)),t("ul",null,[e[3]||(e[3]=t("li",null,[t("p",null,"The correction of error is more difficult than detection of an error.")],-1)),e[4]||(e[4]=t("li",null,[t("p",null,"In error detection, we are looking only to see any error has occurred.")],-1)),e[5]||(e[5]=t("li",null,[t("p",null,"We are not even interested in number of error. The single-bit error or burst error is same for us.")],-1)),t("li",null,[e[2]||(e[2]=t("p",null,"In error correction, we need to know exact number of bits that are corrupted and more importantly, the locationin the message.",-1)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-1247",class:"mermaid my-class",graph:"flowchart%0A%20%20%20%20Sender%5B%20correction%5D%20----%3EReceiver%5BForward%20error%20correction%5D%0A%20%20%20%20Sender%5B%20correction%5D----%3E%20fsd%5BRetransmission%5D%0A%0A"})]),fallback:o(()=>[...e[1]||(e[1]=[i(" Loading... ",-1)])]),_:1}))]),e[6]||(e[6]=t("li",null,[t("p",null,"Forward error correction: Receiver tries to guess by using redundant bits.")],-1)),e[7]||(e[7]=t("li",null,[t("p",null,"Retransmission: Receiver requests sender to retransmit the message.")],-1)),e[8]||(e[8]=t("li",null,[t("p",null,"Hamming distance indicates how many errors in the codewordscan be detected and corrected.")],-1))]),e[16]||(e[16]=n('<hr><blockquote><h3 id="why-framming" tabindex="-1">Why Framming? <a class="header-anchor" href="#why-framming" aria-label="Permalink to &quot;Why Framming?&quot;">​</a></h3><ul><li>Limited buffer sizeat the receiver.</li><li>A larger block of data has higher probability of error.</li></ul></blockquote><blockquote><h3 id="framming-methods" tabindex="-1">Framming Methods <a class="header-anchor" href="#framming-methods" aria-label="Permalink to &quot;Framming Methods&quot;">​</a></h3></blockquote><ul><li><ol><li>Byte stuffing:- The sender inserts a special byte (e.g., ESC) just before each “accidental” flag byte in the data (like in C language, “ macros are replaced with values/definitions”).</li></ol></li><li><ol start="2"><li>Bit stuffing:-Whenever the sender encounters five consecutive 1s in the data, it automatically stuffs a 0 bit into the outgoing bit stream.</li></ol></li></ul><div align="center"><p><img src="'+T+'" alt="alt text"></p></div><blockquote><h3 id="flow-control" tabindex="-1">Flow Control: <a class="header-anchor" href="#flow-control" aria-label="Permalink to &quot;Flow Control:&quot;">​</a></h3><ol><li>Stop-and-Wait Flow Control</li><li>Sliding-Window Flow Control</li></ol></blockquote><ul><li><h2 id="stop-and-wait-flow-control" tabindex="-1">Stop-and-Wait Flow Control <a class="header-anchor" href="#stop-and-wait-flow-control" aria-label="Permalink to &quot;Stop-and-Wait Flow Control&quot;">​</a></h2><ol><li>Source transmits a frame.</li><li>Destination receives theframe,and replies with a small frame called acknowledgement (ACK).</li><li>Source waits for the ACK before sending the next frame.</li><li>Destination can stop the flow by not sending ACK(e.g., if the destination is busy …).</li><li>It is not efficient for long haul transmission and high speed transmission.</li></ol></li><li><h2 id="sliding-window-flow-control" tabindex="-1">Sliding-Window Flow Control <a class="header-anchor" href="#sliding-window-flow-control" aria-label="Permalink to &quot;Sliding-Window Flow Control&quot;">​</a></h2><ol><li>Idea: allow multiple frames to transmit. <ul><li>Receiver has a buffer of W frames</li><li>Transmitter can send up to W frames withoutreceivingACK</li></ul></li><li>Each frame needs to be numbered: sequence number is included in the frame header.</li><li>ACK includes the sequence number of the next expected frameby the receiver</li></ol></li></ul><h2 id="performance-of-both-methods-errors" tabindex="-1">Performance of both methods(Errors) <a class="header-anchor" href="#performance-of-both-methods-errors" aria-label="Permalink to &quot;Performance of both methods(Errors)&quot;">​</a></h2><ol><li>Lost frames</li><li>Damaged frames</li></ol><h3 id="two-approachesfor-error-control" tabindex="-1">Two approachesfor error control : <a class="header-anchor" href="#two-approachesfor-error-control" aria-label="Permalink to &quot;Two approachesfor error control :&quot;">​</a></h3><ol><li>automatic repeat request</li><li>forward error correction</li></ol><h2 id="automatic-repeat-request-arq" tabindex="-1">Automatic Repeat Request(ARQ) <a class="header-anchor" href="#automatic-repeat-request-arq" aria-label="Permalink to &quot;Automatic Repeat Request(ARQ)&quot;">​</a></h2>',12)),t("ul",null,[t("li",null,[e[10]||(e[10]=t("p",null,"The role of ARQ is to turn an unreliable data link into a reliable one.",-1)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-1436",class:"mermaid my-class",graph:"flowchart%0ASender%5Bversions%20of%20ARQ%20%5D%20----%3EReceiver%5BStop-and-wait%5D%0ASender%5B%20versions%20of%20ARQ%5D----%3E%20fsd%5BGo-back-N%5D%0ASender%5B%20versions%20of%20ARQ%5D----%3E%20lkjfd%5BSelective-reject%5D%0A"})]),fallback:o(()=>[...e[9]||(e[9]=[i(" Loading... ",-1)])]),_:1}))])]),e[17]||(e[17]=n('<h3 id="stop-and-wait-arq" tabindex="-1">Stop-and-Wait ARQ <a class="header-anchor" href="#stop-and-wait-arq" aria-label="Permalink to &quot;Stop-and-Wait ARQ&quot;">​</a></h3><ol><li><p>The source station is equipped with a timer.</p></li><li><p>Source transmits a single frame, and waits for an ACK.</p></li><li><p>If the frame is lost.</p><ul><li>The timer eventually fires, and the source retransmits the frame.</li></ul></li><li><p>If receiver receives a damaged frame, discard it.</p><ul><li>he timer eventually fires, and the source retransmits the frame.</li></ul></li><li><p>If everything goes right, but the ACK is damagedor lost, the sourcewill not recognize it.</p><ul><li>he timer eventually fires, the sourcewill retransmit the frame.</li><li>Receiver gets two copies of the same frame!</li></ul></li><li><p>Simple, but inefficient for long distance and high speed applications.</p></li></ol><h3 id="go-back-n-arq" tabindex="-1">Go-Back-N ARQ <a class="header-anchor" href="#go-back-n-arq" aria-label="Permalink to &quot;Go-Back-N ARQ&quot;">​</a></h3><ol><li>Based on sliding-window flow control.</li><li>Use window size to control the number of unacknowledged frames outstanding.</li><li>If no error, the destination will send ACK as usual with next frame expected (positive ACK,RR: receive ready).</li><li>If error, the destination will reply with rejection (negative ACK,REJ: reject).</li></ol><h3 id="selective-reject-arq" tabindex="-1">Selective-Reject ARQ <a class="header-anchor" href="#selective-reject-arq" aria-label="Permalink to &quot;Selective-Reject ARQ&quot;">​</a></h3><ol><li>Also called selective repeat</li><li>Only rejected frames are retransmitted</li><li>Receiver must maintain large enough buffer, and must contain logic for reinserting the retransmitted frame in the proper sequence.</li></ol><blockquote><p>Piggybacking ?</p><ul><li>Piggybacking means sending an acknowledgement (ACK) along with data in the same frame instead of sending it separately because of to overcome overhead.</li></ul></blockquote><blockquote><p>What is HDLC?</p><ul><li>HDLC (High-Level Data Link Control) is a bit-oriented data link layer protocol developed by ISO.</li><li>Provides reliable and efficient communication over both synchronous and asynchronous links.</li></ul></blockquote><h3 id="types-of-hdlc-frames" tabindex="-1">Types of HDLC Frames <a class="header-anchor" href="#types-of-hdlc-frames" aria-label="Permalink to &quot;Types of HDLC Frames&quot;">​</a></h3><ol><li>I-Frame (Information Frame) <ul><li>Carries user data and control information.</li><li>Used for normal data transfer.</li></ul></li><li>S-Frame (Supervisory Frame) <ul><li>Provides control (ACK, NAK, flow control).</li></ul></li><li>U-Frame (Unnumbered Frame) <ul><li>Used for control purposes (like establishing/terminating a connection).</li></ul></li></ol><blockquote><h3 id="point-to-point-protocol-ppp" tabindex="-1">Point-to-Point Protocol (PPP) <a class="header-anchor" href="#point-to-point-protocol-ppp" aria-label="Permalink to &quot;Point-to-Point Protocol (PPP)&quot;">​</a></h3></blockquote><ul><li>HDLC can be used in both point-to-point and multi-point configuration.</li><li>PPP is the most commonly used protocol for point-to-point access.</li></ul><h2 id="why-switching" tabindex="-1">Why Switching? <a class="header-anchor" href="#why-switching" aria-label="Permalink to &quot;Why Switching?&quot;">​</a></h2><ul><li>When we have multiple devices, we have problem of how to connect them to make one-to-one communication possible.</li><li>One solution could be use of mesh topology to have point-to-point connection or have star topology to have just one central node.</li><li>Both are not practical when applied to very large network.</li><li>In the network, what we can have is the devices that are part of the network and capable of creating temporary connections between two or more devices.</li><li>Switch is a device that has such capability.</li></ul><h1 id="switching-methods" tabindex="-1">Switching Methods <a class="header-anchor" href="#switching-methods" aria-label="Permalink to &quot;Switching Methods&quot;">​</a></h1><ul><li>Main responsibility of a switch is to: <ol><li>Forward packets/data from input port to output port</li><li>Select port based on the address in the packet header</li></ol></li></ul>',16)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-1689",class:"mermaid my-class",graph:"flowchart%0A%20%20%20Sender%5BMethods%20of%20Switching%5D%20---%3E%20Circuit%5BCircuit%20Switching%5D%0A%20%20%20Sender%5BMethods%20of%20Switching%5D%20---%3E%20Packet%5BPacket%20Switching%5D%0A%20%20%20Sender%5BMethods%20of%20Switching%5D%20---%3E%20Message%5BMessage%20Switching%5D%0A%20%20%20Packet%5BPacket%20Switching%5D---%3Edt%5BDatagram%20networks%5D%0A%20%20%20Packet%5BPacket%20Switching%5D---%3Edt2%5BVirtual-circuit%20network%5D%0A%0A%0A"})]),fallback:o(()=>[...e[11]||(e[11]=[i(" Loading... ",-1)])]),_:1})),e[18]||(e[18]=n('<div align="center"><p><img src="'+A+'" alt="alt text"></p></div><ol><li>In circuit switching, a physical circuit (or channel) is established between the source and destination of the message before the delivery of the message.</li><li>The circuit switching is mostly used at the physical layer, and was never implemented at the network layer.</li><li>The network layer in the Internet today is a packet-switched network.</li><li>The connecting devices in a packet-switched network still need to decide how to route the packets to the final destination.</li><li>Datagram switching is done at the network layer.</li></ol><div align="center"><p><img src="'+I+'" alt="alt text"></p></div><ol start="6"><li>A virtual-circuit network is cross between a circuit-switched network and datagram network.</li><li>Virtual-circuit network is implemented in the data link layer, while circuit-switched network in physical layer and datagram network in network layer.</li></ol><h2 id="controlled-access" tabindex="-1">Controlled Access <a class="header-anchor" href="#controlled-access" aria-label="Permalink to &quot;Controlled Access&quot;">​</a></h2><ul><li>n controlled access, the stations consults one another to find which station has the right to send.</li><li>A station cannot send unless it has been authorized by the other stations.</li></ul>',6)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-1754",class:"mermaid my-class",graph:"flowchart%0A%20%20%20Sender%5Bcontrolled%20access%20methods%5D%20---%3E%20Circuit%5BReservation%5D%0A%20%20%20Sender%5Bcontrolled%20access%20methods%5D%20---%3E%20Packet%5BPolling%5D%0A%20%20%20Sender%5Bcontrolled%20access%20methods%5D%20---%3E%20Message%5BToken%20Passing%5D%0A%0A"})]),fallback:o(()=>[...e[12]||(e[12]=[i(" Loading... ",-1)])]),_:1})),e[19]||(e[19]=t("p",null,"=======",-1)),e[20]||(e[20]=t("ul",null,[t("li",null,[t("h2",{id:"dns",tabindex:"-1"},[i("DNS "),t("a",{class:"header-anchor",href:"#dns","aria-label":'Permalink to "DNS"'},"​")])]),t("li",null,[t("strong",null,"Name Space"),i(":-Names must be unique because addresses are unique.")])],-1)),(a(),s(d,null,{default:o(()=>[l(r,{id:"mermaid-1770",class:"mermaid my-class",graph:"flowchart%0A%20%20node1%5BName%20space%20method%5D---%3Enode2%5BFlat%20name%20space%5D%0A%20%20node1%5BName%20space%20method%5D---%3Enode3%5BHierarchical%20Name%20Space%5D%0A%0A"})]),fallback:o(()=>[...e[13]||(e[13]=[i(" Loading... ",-1)])]),_:1})),e[21]||(e[21]=n('<ul><li><p><strong>Flat name space</strong>:-A name is a sequence of characters without interface.</p></li><li><p><strong>Hierarchical Name Space</strong>:-</p><ol><li>Each name is made of several parts.</li><li>Each parts may have meaning/interpretation.</li><li>Eg. (nits.ac.in=&gt; nits . ac. in)</li><li>Authority to assign and control of name space can be decentralized.</li><li>The central authority can assign and control a part of the name that defines the nature of the organization and name of the organization.</li><li>The organization add (suffixes) or (prefixes) to define its host or resources.</li><li>The management of the organization need not to worry about the prefix chosen by different organization.</li><li>names are defined in an inverted tree structure with the root at the top.</li></ol></li><li><h3 id="label" tabindex="-1">Label <a class="header-anchor" href="#label" aria-label="Permalink to &quot;Label&quot;">​</a></h3><ul><li>Each node in the tree has a label, which is a string with max of 63 characters.</li><li>The root label is null string (empty string)</li></ul></li></ul><div align="center"><p><img src="'+S+'" alt="alt text"></p></div><ul><li><h3 id="domain-name" tabindex="-1">Domain Name <a class="header-anchor" href="#domain-name" aria-label="Permalink to &quot;Domain Name&quot;">​</a></h3><ul><li>The domain names are always read from the node uptothe root so that it ends with last label of the root (null).</li><li>Each node in the tree has a domain name.</li><li>A full domain name is a sequence of labels separated by dots (.).</li><li>A full domain name always ends with a null label, which means last character is a dot because the null string is nothing.</li></ul></li></ul><div align="center"><p><img src="'+C+'" alt="alt text"></p></div><h3 id="domain-name-categories" tabindex="-1">Domain Name Categories <a class="header-anchor" href="#domain-name-categories" aria-label="Permalink to &quot;Domain Name Categories&quot;">​</a></h3><ol><li><strong>Fully Qualified Domain Name (FQDN)</strong>:If a domain name is terminated by a labelof root i.e. null string it is call FQDN.</li><li><strong>Partially Qualified Domain Name (PQDN)</strong>:A PQDN starts from a node but it does not reach the root.</li></ol><ul><li><h3 id="domain" tabindex="-1">Domain <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;Domain&quot;">​</a></h3><ul><li>A domain is subtree of the domain space.</li><li>The name of the domain is the domain name of the node at the top of the subtree.</li></ul></li></ul><div align="center"><p><img src="'+x+'" alt="alt text"></p></div><h3 id="distribution-of-name-space" tabindex="-1">Distribution of Name Space <a class="header-anchor" href="#distribution-of-name-space" aria-label="Permalink to &quot;Distribution of Name Space&quot;">​</a></h3><ul><li>The information contained in the domain name space must be stored.</li><li>However, it is very inefficient and also unreliable to have just one computer store such a huge amount of information.</li><li>It is not reliable because any failure makes the data inaccessible.</li><li>The solution to these problems is to distribute the information among many computers called DNS servers.</li><li>Because a domain created in this way could be very large, DNS allows domains to be divided further into smaller domains (subdomains).</li></ul><div align="center"><p><img src="'+D+'" alt="alt text"></p></div><h3 id="dns-in-the-internet" tabindex="-1">DNS in the Internet <a class="header-anchor" href="#dns-in-the-internet" aria-label="Permalink to &quot;DNS in the Internet&quot;">​</a></h3><ul><li><p>DNS is a protocol that can be used in different platforms.</p></li><li><p>In the Internet, the domain name space (tree) is divided into three different sections:</p><ol><li><strong>Generic domains</strong>:-Defines registered hosts according to their generic behavior.</li><li><strong>Country Domains</strong>:-he country domains section uses two-character country abbreviations (e.g., infor Bharat).</li><li><strong>Inverse Domain</strong>:-The inverse domain is used to map an address to a name, The server asks its resolverto send a query to the DNS server to map an address to a name to determine if the client is on the authorized list.</li></ol></li><li><h3 id="name-address-resolution" tabindex="-1">Name-address Resolution <a class="header-anchor" href="#name-address-resolution" aria-label="Permalink to &quot;Name-address Resolution&quot;">​</a></h3></li><li><p>The resolver, a DNS client within the client/server-based DNS system, maps names to addresses (or vice versa) by sending a request to the nearest DNS server, which either provides the information directly or refers/queries other servers, and once the mapping is obtained, the resolver interprets the response, checks for errors, and delivers the final result to the requesting process</p></li></ul><ol><li>Recursive Resolution:-</li></ol><div align="center"><p><img src="'+N+'" alt="alt text"></p></div><ol start="2"><li>Iterative Resolution:-</li></ol><div align="center"><p><img src="'+_+'" alt="alt text"></p></div><ul><li><h2 id="electronic-mail-email" tabindex="-1">Electronic Mail (email) <a class="header-anchor" href="#electronic-mail-email" aria-label="Permalink to &quot;Electronic Mail (email)&quot;">​</a></h2></li><li><p>There are three components in email systems:</p><ol><li>User Agent (UA)</li><li>Message Transfer Agent (MTA)</li><li>Message Access Agent (MAA)</li></ol></li></ul><div align="center"><p><img src="'+M+'" alt="alt text"></p></div><ul><li><strong>User Agent (UA)</strong>:- <ol><li>It provides service to the user to make the process of sending and receiving a message easier.</li><li>It is a software package (program) that composes, reads, replies to, and forwards messages. Various services are shown in Figure below.</li></ol></li></ul><ol start="3"><li>To deliver mail, a mail handling system must use an addressing system with unique addresses.</li><li>In the Internet, the address consists of two parts: a local partand a domain name, separated by an @sign.</li></ol><h3 id="mime" tabindex="-1">MIME <a class="header-anchor" href="#mime" aria-label="Permalink to &quot;MIME&quot;">​</a></h3><ul><li>Multipurpose Internet Mail Extensions (MIME) is a supplementary protocol that allows non-ASCII data to be sent through e-mail.</li><li>Simple electronic email can send messages only in 7-bit ASCII format.</li><li>MIME transforms non-ASCII data at the sender site to ASCII data and delivers them to the client MTA to be sent through the Internet.</li><li>Message at the receiving side is transformed back to original data.</li></ul><h3 id="message-transfer-agent-smtp-protocol" tabindex="-1">Message Transfer Agent : SMTP(protocol) <a class="header-anchor" href="#message-transfer-agent-smtp-protocol" aria-label="Permalink to &quot;Message Transfer Agent : SMTP(protocol)&quot;">​</a></h3><ul><li>The actual mail transfer is done through message transfer agents.</li><li>To send mail, a system must have the client MTA, and to receive mail, a system must have a server MTA.</li><li>The formal protocol that defines the MTA client and server in the Internet is called the Simple Mail Transfer Protocol (SMTP).</li><li>SMTP is used two times, between the sender and the sender&#39;s mail server and between the two mail servers.</li></ul><div align="center"><p><img src="'+R+'" alt="alt text"></p></div><h3 id="message-access-agent-pop-and-imap" tabindex="-1">Message Access Agent: POP and IMAP <a class="header-anchor" href="#message-access-agent-pop-and-imap" aria-label="Permalink to &quot;Message Access Agent: POP and IMAP&quot;">​</a></h3><ul><li><p>SMTP is used in first two stages (components).</p></li><li><p>It is not involved in the third stage because SMTP is a pushprotocol; it pushes the message from the client to the server.</p></li><li><p>In last stage, message has to be pulled from server to client. So, third stage has to use pull protocol.</p></li><li><p>Message Access Protocols:</p><ol><li>Post office Protocol version 3 (POP3)</li><li>Internet Mail Access Protocol ver4 (IMAP4)</li></ol></li></ul><h2 id="pop3" tabindex="-1">POP3 <a class="header-anchor" href="#pop3" aria-label="Permalink to &quot;POP3&quot;">​</a></h2><ul><li>Post Office Protocol, version 3 (POP3) is simple and limited in functionality.</li><li>The client POP3 software is installed on the recipient computer.</li><li>The server POP3 software is installed on the mail server.</li><li>POP3 has two modes: <ol><li>Delete mode-the mail is deleted from the mailbox after each retrieval.</li><li>Keep mode-the mail remains in the mailbox after retrieval.</li></ol></li></ul><h2 id="imap4" tabindex="-1">IMAP4 <a class="header-anchor" href="#imap4" aria-label="Permalink to &quot;IMAP4&quot;">​</a></h2><ul><li><p>IMAP4 is similar to POP3, but it has more features; IMAP4 is more powerful and more complex.</p></li><li><p>A user can partially download e-mail.</p></li><li><p>A user can create, delete, or rename mailboxes on the mail server.</p></li><li><p>A user can search the contents of the e-mail for a specific string of characters prior to downloading.</p></li><li><h2 id="web-based-email" tabindex="-1">Web-based Email <a class="header-anchor" href="#web-based-email" aria-label="Permalink to &quot;Web-based Email&quot;">​</a></h2></li><li><p>Some websites today provide this service to anyone who accesses the site eg. Google, Yahoo, Hotmail.</p></li><li><p>Mail transfer from Alice&#39;s browser to her mail server is done through HTTP.</p></li><li><p>The transfer of the message from the sending mail server to the receiving mail server is still through SMTP.</p></li><li><p>Finally, the message from the receiving server (the Web server) to Bob&#39;s browser is done through HTTP.</p></li><li><h2 id="file-transfer-ftp" tabindex="-1">File Transfer -FTP <a class="header-anchor" href="#file-transfer-ftp" aria-label="Permalink to &quot;File Transfer -FTP&quot;">​</a></h2></li><li><p>File Transfer Protocol (FTP) is the standard mechanism provided by TCP/IP for copying a file from one host to another.</p></li><li><p>FTP establishes two TCP connections between the hosts.</p></li><li><p>One connection is used for data transfer, the other for control information (commands and responses).</p></li><li><p>FTP uses two well-known TCP ports:</p><ol><li>Port 21 is used for the control connection, and</li><li>port 20 is used for the data connection.</li></ol></li></ul><div align="center"><p><img src="'+E+'" alt="alt text"></p></div><ul><li><h2 id="routing-protocols-and-algorithms" tabindex="-1">Routing Protocols and Algorithms <a class="header-anchor" href="#routing-protocols-and-algorithms" aria-label="Permalink to &quot;Routing Protocols and Algorithms&quot;">​</a></h2></li></ul><h2 id="types-of-routing" tabindex="-1">Types of Routing <a class="header-anchor" href="#types-of-routing" aria-label="Permalink to &quot;Types of Routing&quot;">​</a></h2><ul><li>Autonomous system(AS) is a group of networks and routers come under single administrative authority.</li></ul><ol><li><p>Inter-domain routing-Routing between AS</p></li><li><p>Intra-domain routing-Routing within AS</p></li></ol><div align="center"><p><img src="'+B+'" alt="alt text"></p></div><blockquote><h3 id="two-node-instability" tabindex="-1">Two Node Instability <a class="header-anchor" href="#two-node-instability" aria-label="Permalink to &quot;Two Node Instability&quot;">​</a></h3></blockquote><ul><li>Imagine only 2 stations (nodes) trying to send data on a shared medium.&gt; * If both nodes sense the channel as idle at the same time, they may transmit simultaneously → collision.</li><li>After collision, both back off and retry, but if they both choose the same backoff time repeatedly → continuous collisions can occur.</li><li>This situation is called 2-node instability (system becomes unstable because just 2 nodes cannot resolve the collision smoothly).</li></ul><h3 id="three-node-instability" tabindex="-1">Three-Node Instability <a class="header-anchor" href="#three-node-instability" aria-label="Permalink to &quot;Three-Node Instability&quot;">​</a></h3><ul><li><p>Now, consider 3 or more nodes sharing the medium.</p></li><li><p>When collisions occur among them, the backoff algorithm has more randomness (different nodes likely pick different wait times).</p></li><li><p>But as the number of nodes increases, probability of repeated collisions also increases.</p></li><li><p>This makes the system unstable with 3 or more nodes, where throughput may collapse due to excessive collisions.</p></li><li><h2 id="routing-information-protocol-rip" tabindex="-1">Routing Information Protocol (RIP) <a class="header-anchor" href="#routing-information-protocol-rip" aria-label="Permalink to &quot;Routing Information Protocol (RIP)&quot;">​</a></h2><ul><li>It is based on distance vector routing (DVR).</li><li>Metric used in RIP is hop count i.e. the number of links (networks) that have to be used to reach the destination.</li></ul></li><li><p>It helps routers figure out the best path to send data from one network to another.</p></li><li><p>Maximum hop count = 15.</p></li><li><h3 id="what-is-border-gateway-protocol-bgp" tabindex="-1">What is Border Gateway Protocol (BGP)? <a class="header-anchor" href="#what-is-border-gateway-protocol-bgp" aria-label="Permalink to &quot;What is Border Gateway Protocol (BGP)?&quot;">​</a></h3></li><li><p>To exchange routing information between different Autonomous Systems (AS)</p></li><li><p>Unlike RIP (distance vector) or OSPF (link state), BGP is a path vector protocol – it keeps the whole path (list of AS numbers) to avoid loop</p></li></ul><h2 id="addressing" tabindex="-1">Addressing <a class="header-anchor" href="#addressing" aria-label="Permalink to &quot;Addressing&quot;">​</a></h2><ul><li><p>Data link layer, we need a MAC address to choose ONE node among SEVERAL node.</p></li><li><p>At the Network layer we need an IP address to choose one Host among Millions.</p></li><li><p>At the Transport layer we need a transport layer address called a PORT NUMBER ,to choose among multiple processes running on the destination host.</p></li><li><p>Destination port number for delivery; source port no for the reply</p></li><li><h3 id="socket-address" tabindex="-1">Socket Address <a class="header-anchor" href="#socket-address" aria-label="Permalink to &quot;Socket Address&quot;">​</a></h3></li><li><p>Process to process delivery needs two identifiers , IP address and port number at each end to make a connection.</p></li><li><p>The combination of IP address and a Port number is called a socket address</p></li></ul><table tabindex="0"><thead><tr><th>Feature</th><th>UDP (User Datagram Protocol)</th><th>TCP (Transmission Control Protocol)</th><th>SMTP (Simple Mail Transfer Protocol)</th></tr></thead><tbody><tr><td>Layer</td><td>Transport Layer</td><td>Transport Layer</td><td>Application Layer</td></tr><tr><td>Connection</td><td>Connectionless</td><td>Connection-oriented</td><td>Connection-oriented (uses TCP)</td></tr><tr><td>Reliability</td><td>No reliability, no ACKs</td><td>Reliable (ACKs, retransmission)</td><td>Reliable (inherited from TCP)</td></tr><tr><td>Data Transfer</td><td>Fast, low overhead</td><td>Slower due to error checking &amp; flow control</td><td>Used for sending emails (store-and-forward)</td></tr><tr><td>Ordering</td><td>No guarantee of order</td><td>Ensures ordered delivery</td><td>Ensures email delivery in correct sequence</td></tr><tr><td>Use Cases</td><td>Streaming, VoIP, DNS, gaming</td><td>File transfer, web browsing, emails</td><td>Email transfer between mail servers</td></tr><tr><td>Protocol Type</td><td>Transport protocol</td><td>Transport protocol</td><td>Application protocol (runs on TCP)</td></tr><tr><td>Port Number</td><td>Varies (e.g., DNS uses 53)</td><td>Varies (e.g., HTTP uses 80, HTTPS 443)</td><td>Default port 25 (SMTP), also 465/587</td></tr></tbody></table><h3 id="tcp-connection-establishment" tabindex="-1">TCP Connection Establishment <a class="header-anchor" href="#tcp-connection-establishment" aria-label="Permalink to &quot;TCP Connection Establishment&quot;">​</a></h3><ul><li><p>TCP transmits data in full-Duplex mode .</p></li><li><p>When two TCP’s in two machines are connected, they are able . to send segment to each other simultaneously.</p></li><li><p>So each party must initialize communication and get approval . from other party before any data are transferred.</p></li><li><p>The connection establishment in TCP is called Three way handshaking.</p></li><li><p>TCP uses sliding window to handle the flow control.</p></li></ul><h3 id="tcp-congestion-control" tabindex="-1">TCP Congestion Control <a class="header-anchor" href="#tcp-congestion-control" aria-label="Permalink to &quot;TCP Congestion Control&quot;">​</a></h3><ul><li>Two Categories of Congestion Control Mechanisms: 1. Open Loop Congestion Control _ These policies are applied to prevent congestion before it happens. _ In these mechanisms, congestion control is handled by either source or destination. 2. Closed Loop Congestion Control * These mechanisms try to overcome congestion after it happens</li></ul>',49))])}const Q=c(L,[["render",F]]);export{z as __pageData,Q as default};
