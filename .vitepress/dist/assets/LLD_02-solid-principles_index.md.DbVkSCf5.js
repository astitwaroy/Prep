import{_ as p,C as h,c,o as e,a4 as a,b as t,w as s,a as l,G as r,a5 as o}from"./chunks/framework.BTsuxa0O.js";const D=JSON.parse('{"title":"🏗️ SOLID Principles","description":"","frontmatter":{},"headers":[],"relativePath":"LLD/02-solid-principles/index.md","filePath":"LLD/02-solid-principles/index.md"}'),d={name:"LLD/02-solid-principles/index.md"};function k(g,i,u,b,m,y){const n=h("Mermaid");return e(),c("div",null,[i[2]||(i[2]=a('<p>🧑‍💻 <strong>Author:</strong> RK ROY</p><h1 id="🏗️-solid-principles" tabindex="-1">🏗️ SOLID Principles <a class="header-anchor" href="#🏗️-solid-principles" aria-label="Permalink to &quot;🏗️ SOLID Principles&quot;">​</a></h1><p>The SOLID principles are five fundamental design principles that help create maintainable, flexible, and robust object-oriented software. These principles were popularized by Robert C. Martin (Uncle Bob) and form the foundation of clean code and good software design.</p><h2 id="🎯-overview" tabindex="-1">🎯 Overview <a class="header-anchor" href="#🎯-overview" aria-label="Permalink to &quot;🎯 Overview&quot;">​</a></h2><p><strong>SOLID</strong> is an acronym for:</p><ul><li><strong>S</strong> - Single Responsibility Principle (SRP)</li><li><strong>O</strong> - Open/Closed Principle (OCP)</li><li><strong>L</strong> - Liskov Substitution Principle (LSP)</li><li><strong>I</strong> - Interface Segregation Principle (ISP)</li><li><strong>D</strong> - Dependency Inversion Principle (DIP)</li></ul><h2 id="📚-the-solid-principles" tabindex="-1">📚 The SOLID Principles <a class="header-anchor" href="#📚-the-solid-principles" aria-label="Permalink to &quot;📚 The SOLID Principles&quot;">​</a></h2>',7)),(e(),t(o,null,{default:s(()=>[r(n,{id:"mermaid-45",class:"mermaid my-class",graph:"mindmap%0A%20%20root((SOLID))%0A%20%20%20%20S%5BSingle%20Responsibility%5D%0A%20%20%20%20%20%20sr1%5BOne%20reason%20to%20change%5D%0A%20%20%20%20%20%20sr2%5BFocused%20responsibility%5D%0A%20%20%20%20%20%20sr3%5BHigh%20cohesion%5D%0A%20%20%20%20O%5BOpen%2FClosed%5D%0A%20%20%20%20%20%20oc1%5BOpen%20for%20extension%5D%0A%20%20%20%20%20%20oc2%5BClosed%20for%20modification%5D%0A%20%20%20%20%20%20oc3%5BUse%20abstractions%5D%0A%20%20%20%20L%5BLiskov%20Substitution%5D%0A%20%20%20%20%20%20ls1%5BSubstitutability%5D%0A%20%20%20%20%20%20ls2%5BContract%20compliance%5D%0A%20%20%20%20%20%20ls3%5BBehavioral%20compatibility%5D%0A%20%20%20%20I%5BInterface%20Segregation%5D%0A%20%20%20%20%20%20is1%5BFocused%20interfaces%5D%0A%20%20%20%20%20%20is2%5BNo%20fat%20interfaces%5D%0A%20%20%20%20%20%20is3%5BClient-specific%20interfaces%5D%0A%20%20%20%20D%5BDependency%20Inversion%5D%0A%20%20%20%20%20%20di1%5BDepend%20on%20abstractions%5D%0A%20%20%20%20%20%20di2%5BHigh-level%20modules%5D%0A%20%20%20%20%20%20di3%5BInversion%20of%20control%5D%0A"})]),fallback:s(()=>[...i[0]||(i[0]=[l(" Loading... ",-1)])]),_:1})),i[3]||(i[3]=a('<h2 id="🎭-why-solid-principles-matter" tabindex="-1">🎭 Why SOLID Principles Matter <a class="header-anchor" href="#🎭-why-solid-principles-matter" aria-label="Permalink to &quot;🎭 Why SOLID Principles Matter&quot;">​</a></h2><h3 id="✅-benefits" tabindex="-1">✅ Benefits <a class="header-anchor" href="#✅-benefits" aria-label="Permalink to &quot;✅ Benefits&quot;">​</a></h3><ul><li><strong>Maintainability</strong>: Easier to understand, modify, and extend</li><li><strong>Flexibility</strong>: Adaptable to changing requirements</li><li><strong>Testability</strong>: Easier to write unit tests</li><li><strong>Reusability</strong>: Components can be reused across different contexts</li><li><strong>Reduced Coupling</strong>: Less interdependence between components</li><li><strong>Better Design</strong>: Leads to cleaner, more organized code</li></ul><h3 id="❌-problems-they-solve" tabindex="-1">❌ Problems They Solve <a class="header-anchor" href="#❌-problems-they-solve" aria-label="Permalink to &quot;❌ Problems They Solve&quot;">​</a></h3><ul><li><strong>Rigid Code</strong>: Hard to change without breaking other parts</li><li><strong>Fragile Code</strong>: Small changes cause unexpected failures</li><li><strong>Immobile Code</strong>: Difficult to reuse in different contexts</li><li><strong>Complex Dependencies</strong>: Tightly coupled components</li><li><strong>Difficult Testing</strong>: Hard to isolate and test components</li></ul><h2 id="🚀-learning-path" tabindex="-1">🚀 Learning Path <a class="header-anchor" href="#🚀-learning-path" aria-label="Permalink to &quot;🚀 Learning Path&quot;">​</a></h2><h3 id="beginner-approach" tabindex="-1">Beginner Approach <a class="header-anchor" href="#beginner-approach" aria-label="Permalink to &quot;Beginner Approach&quot;">​</a></h3><ol><li><strong>Start with SRP</strong>: Understand single responsibility</li><li><strong>Learn OCP</strong>: Practice extending without modifying</li><li><strong>Master LSP</strong>: Understand proper inheritance</li><li><strong>Apply ISP</strong>: Create focused interfaces</li><li><strong>Implement DIP</strong>: Use dependency injection</li></ol><h3 id="practice-strategy" tabindex="-1">Practice Strategy <a class="header-anchor" href="#practice-strategy" aria-label="Permalink to &quot;Practice Strategy&quot;">​</a></h3><ul><li>Read each principle thoroughly</li><li>Understand the problem it solves</li><li>Study the examples (both good and bad)</li><li>Practice with the provided exercises</li><li>Apply to your own projects</li></ul><h2 id="📖-detailed-sections" tabindex="-1">📖 Detailed Sections <a class="header-anchor" href="#📖-detailed-sections" aria-label="Permalink to &quot;📖 Detailed Sections&quot;">​</a></h2><h3 id="_1-single-responsibility-principle-srp" tabindex="-1">1. <a href="./01-srp.html">Single Responsibility Principle (SRP)</a> <a class="header-anchor" href="#_1-single-responsibility-principle-srp" aria-label="Permalink to &quot;1. [Single Responsibility Principle (SRP)](./01-srp.md)&quot;">​</a></h3><blockquote><p>A class should have only one reason to change.</p></blockquote><p><strong>Key Concepts:</strong></p><ul><li>One responsibility per class</li><li>High cohesion</li><li>Separation of concerns</li></ul><h3 id="_2-open-closed-principle-ocp" tabindex="-1">2. <a href="./02-ocp.html">Open/Closed Principle (OCP)</a> <a class="header-anchor" href="#_2-open-closed-principle-ocp" aria-label="Permalink to &quot;2. [Open/Closed Principle (OCP)](./02-ocp.md)&quot;">​</a></h3><blockquote><p>Software entities should be open for extension but closed for modification.</p></blockquote><p><strong>Key Concepts:</strong></p><ul><li>Extension through inheritance/composition</li><li>Abstraction and polymorphism</li><li>Plugin architectures</li></ul><h3 id="_3-liskov-substitution-principle-lsp" tabindex="-1">3. <a href="./03-lsp.html">Liskov Substitution Principle (LSP)</a> <a class="header-anchor" href="#_3-liskov-substitution-principle-lsp" aria-label="Permalink to &quot;3. [Liskov Substitution Principle (LSP)](./03-lsp.md)&quot;">​</a></h3><blockquote><p>Objects of a superclass should be replaceable with objects of its subclasses.</p></blockquote><p><strong>Key Concepts:</strong></p><ul><li>Behavioral substitutability</li><li>Contract compliance</li><li>Proper inheritance hierarchies</li></ul><h3 id="_4-interface-segregation-principle-isp" tabindex="-1">4. <a href="./04-isp.html">Interface Segregation Principle (ISP)</a> <a class="header-anchor" href="#_4-interface-segregation-principle-isp" aria-label="Permalink to &quot;4. [Interface Segregation Principle (ISP)](./04-isp.md)&quot;">​</a></h3><blockquote><p>Clients should not be forced to depend on interfaces they don&#39;t use.</p></blockquote><p><strong>Key Concepts:</strong></p><ul><li>Focused interfaces</li><li>Role-based design</li><li>Avoiding fat interfaces</li></ul><h3 id="_5-dependency-inversion-principle-dip" tabindex="-1">5. <a href="./05-dip.html">Dependency Inversion Principle (DIP)</a> <a class="header-anchor" href="#_5-dependency-inversion-principle-dip" aria-label="Permalink to &quot;5. [Dependency Inversion Principle (DIP)](./05-dip.md)&quot;">​</a></h3><blockquote><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p></blockquote><p><strong>Key Concepts:</strong></p><ul><li>Dependency injection</li><li>Inversion of control</li><li>Abstraction layers</li></ul><h2 id="🛠️-practical-application" tabindex="-1">🛠️ Practical Application <a class="header-anchor" href="#🛠️-practical-application" aria-label="Permalink to &quot;🛠️ Practical Application&quot;">​</a></h2><h3 id="solid-in-action-e-commerce-example" tabindex="-1">SOLID in Action: E-commerce Example <a class="header-anchor" href="#solid-in-action-e-commerce-example" aria-label="Permalink to &quot;SOLID in Action: E-commerce Example&quot;">​</a></h3><p>Let&#39;s see how SOLID principles work together in a real system:</p>',34)),(e(),t(o,null,{default:s(()=>[r(n,{id:"mermaid-329",class:"mermaid my-class",graph:"classDiagram%0A%20%20%20%20class%20OrderService%20%7B%0A%20%20%20%20%20%20%20%20-PaymentProcessor%20paymentProcessor%0A%20%20%20%20%20%20%20%20-InventoryService%20inventoryService%0A%20%20%20%20%20%20%20%20-NotificationService%20notificationService%0A%20%20%20%20%20%20%20%20%2BprocessOrder(order)%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PaymentProcessor%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2BprocessPayment(amount)%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20CreditCardProcessor%20%7B%0A%20%20%20%20%20%20%20%20%2BprocessPayment(amount)%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PayPalProcessor%20%7B%0A%20%20%20%20%20%20%20%20%2BprocessPayment(amount)%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20InventoryService%20%7B%0A%20%20%20%20%20%20%20%20%2BcheckAvailability(productId)%0A%20%20%20%20%20%20%20%20%2BreserveItem(productId)%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20NotificationService%20%7B%0A%20%20%20%20%20%20%20%20%2BsendConfirmation(order)%0A%20%20%20%20%7D%0A%0A%20%20%20%20OrderService%20--%3E%20PaymentProcessor%0A%20%20%20%20OrderService%20--%3E%20InventoryService%0A%20%20%20%20OrderService%20--%3E%20NotificationService%0A%20%20%20%20CreditCardProcessor%20..%7C%3E%20PaymentProcessor%0A%20%20%20%20PayPalProcessor%20..%7C%3E%20PaymentProcessor%0A"})]),fallback:s(()=>[...i[1]||(i[1]=[l(" Loading... ",-1)])]),_:1})),i[4]||(i[4]=a(`<p>This design follows all SOLID principles:</p><ul><li><strong>SRP</strong>: Each class has a single responsibility</li><li><strong>OCP</strong>: New payment methods can be added without modifying OrderService</li><li><strong>LSP</strong>: All payment processors are interchangeable</li><li><strong>ISP</strong>: Interfaces are focused and specific</li><li><strong>DIP</strong>: OrderService depends on abstractions, not concrete classes</li></ul><h2 id="🎯-common-violations-and-solutions" tabindex="-1">🎯 Common Violations and Solutions <a class="header-anchor" href="#🎯-common-violations-and-solutions" aria-label="Permalink to &quot;🎯 Common Violations and Solutions&quot;">​</a></h2><h3 id="violation-example-god-class" tabindex="-1">Violation Example: God Class <a class="header-anchor" href="#violation-example-god-class" aria-label="Permalink to &quot;Violation Example: God Class&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Violates SRP, hard to maintain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String email;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Database operations</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveToDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deleteFromDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Email operations</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validateEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Authentication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="solid-solution-separated-responsibilities" tabindex="-1">SOLID Solution: Separated Responsibilities <a class="header-anchor" href="#solid-solution-separated-responsibilities" aria-label="Permalink to &quot;SOLID Solution: Separated Responsibilities&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Follows SOLID principles</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Only user data and basic operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EmailService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isValidEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthenticationService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="📊-solid-principles-comparison" tabindex="-1">📊 SOLID Principles Comparison <a class="header-anchor" href="#📊-solid-principles-comparison" aria-label="Permalink to &quot;📊 SOLID Principles Comparison&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Principle</th><th>Focus</th><th>Main Benefit</th><th>Common Violation</th></tr></thead><tbody><tr><td><strong>SRP</strong></td><td>Responsibility</td><td>Maintainability</td><td>God classes</td></tr><tr><td><strong>OCP</strong></td><td>Extension</td><td>Flexibility</td><td>Modifying existing code</td></tr><tr><td><strong>LSP</strong></td><td>Substitution</td><td>Reliability</td><td>Breaking contracts</td></tr><tr><td><strong>ISP</strong></td><td>Interface Design</td><td>Decoupling</td><td>Fat interfaces</td></tr><tr><td><strong>DIP</strong></td><td>Dependencies</td><td>Testability</td><td>Tight coupling</td></tr></tbody></table><h2 id="🏆-best-practices" tabindex="-1">🏆 Best Practices <a class="header-anchor" href="#🏆-best-practices" aria-label="Permalink to &quot;🏆 Best Practices&quot;">​</a></h2><h3 id="general-guidelines" tabindex="-1">General Guidelines <a class="header-anchor" href="#general-guidelines" aria-label="Permalink to &quot;General Guidelines&quot;">​</a></h3><ol><li><strong>Start Simple</strong>: Don&#39;t over-engineer initially</li><li><strong>Refactor Regularly</strong>: Apply SOLID principles during refactoring</li><li><strong>Use Design Patterns</strong>: Many patterns implement SOLID principles</li><li><strong>Write Tests</strong>: SOLID code is easier to test</li><li><strong>Code Reviews</strong>: Use SOLID as evaluation criteria</li></ol><h3 id="red-flags-to-watch-for" tabindex="-1">Red Flags to Watch For <a class="header-anchor" href="#red-flags-to-watch-for" aria-label="Permalink to &quot;Red Flags to Watch For&quot;">​</a></h3><ul><li>❌ Classes with multiple responsibilities</li><li>❌ Modifying existing classes for new features</li><li>❌ Subclasses that can&#39;t replace parent classes</li><li>❌ Interfaces with too many methods</li><li>❌ High-level classes depending on low-level details</li></ul><h2 id="🎓-exercises-and-practice" tabindex="-1">🎓 Exercises and Practice <a class="header-anchor" href="#🎓-exercises-and-practice" aria-label="Permalink to &quot;🎓 Exercises and Practice&quot;">​</a></h2><h3 id="exercise-1-identify-violations" tabindex="-1">Exercise 1: Identify Violations <a class="header-anchor" href="#exercise-1-identify-violations" aria-label="Permalink to &quot;Exercise 1: Identify Violations&quot;">​</a></h3><p>Review existing code and identify SOLID principle violations.</p><h3 id="exercise-2-refactor-legacy-code" tabindex="-1">Exercise 2: Refactor Legacy Code <a class="header-anchor" href="#exercise-2-refactor-legacy-code" aria-label="Permalink to &quot;Exercise 2: Refactor Legacy Code&quot;">​</a></h3><p>Take a poorly designed class and refactor it to follow SOLID principles.</p><h3 id="exercise-3-design-from-scratch" tabindex="-1">Exercise 3: Design from Scratch <a class="header-anchor" href="#exercise-3-design-from-scratch" aria-label="Permalink to &quot;Exercise 3: Design from Scratch&quot;">​</a></h3><p>Design a new feature using SOLID principles from the beginning.</p><h3 id="exercise-4-pattern-application" tabindex="-1">Exercise 4: Pattern Application <a class="header-anchor" href="#exercise-4-pattern-application" aria-label="Permalink to &quot;Exercise 4: Pattern Application&quot;">​</a></h3><p>Implement common design patterns that demonstrate SOLID principles.</p><h2 id="🔗-related-concepts" tabindex="-1">🔗 Related Concepts <a class="header-anchor" href="#🔗-related-concepts" aria-label="Permalink to &quot;🔗 Related Concepts&quot;">​</a></h2><ul><li><strong>Design Patterns</strong>: Many patterns implement SOLID principles</li><li><strong>Clean Architecture</strong>: Built on SOLID foundation</li><li><strong>Test-Driven Development</strong>: Easier with SOLID code</li><li><strong>Dependency Injection</strong>: Implements DIP</li><li><strong>Interface-Based Programming</strong>: Supports OCP and DIP</li></ul><h2 id="📚-further-reading" tabindex="-1">📚 Further Reading <a class="header-anchor" href="#📚-further-reading" aria-label="Permalink to &quot;📚 Further Reading&quot;">​</a></h2><ul><li>&quot;Clean Code&quot; by Robert C. Martin</li><li>&quot;Agile Software Development, Principles, Patterns, and Practices&quot; by Robert C. Martin</li><li>&quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot; by Gang of Four</li></ul><hr><h2 id="🚀-getting-started" tabindex="-1">🚀 Getting Started <a class="header-anchor" href="#🚀-getting-started" aria-label="Permalink to &quot;🚀 Getting Started&quot;">​</a></h2><p>Ready to dive deep into SOLID principles? Start with the <a href="./01-srp.html">Single Responsibility Principle</a> and work your way through each principle systematically.</p><p>Remember: SOLID principles are guidelines, not rigid rules. Use them to create better software, but don&#39;t over-engineer solutions.</p>`,31))])}const f=p(d,[["render",k]]);export{D as __pageData,f as default};
