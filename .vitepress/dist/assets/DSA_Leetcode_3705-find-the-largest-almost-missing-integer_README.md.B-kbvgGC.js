import{_ as o,c as t,o as l,ag as a,j as e,a as s}from"./chunks/framework.DUDLMHYb.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3705-find-the-largest-almost-missing-integer/README.md","filePath":"DSA/Leetcode/3705-find-the-largest-almost-missing-integer/README.md"}'),r={name:"DSA/Leetcode/3705-find-the-largest-almost-missing-integer/README.md"};function i(p,n,c,d,u,g){return l(),t("div",null,[...n[0]||(n[0]=[a('<h2><a href="https://leetcode.com/problems/find-the-largest-almost-missing-integer">3705. Find the Largest Almost Missing Integer</a></h2><h3>Easy</h3><hr><p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p><p>An integer <code>x</code> is <strong>almost missing</strong> from <code>nums</code> if <code>x</code> appears in <em>exactly</em> one subarray of size <code>k</code> within <code>nums</code>.</p><p>Return the <b>largest</b> <strong>almost missing</strong> integer from <code>nums</code>. If no such integer exists, return <code>-1</code>.</p> A <strong>subarray</strong> is a contiguous sequence of elements within an array. <p> </p><p><strong class="example">Example 1:</strong></p>',11),e("div",{class:"example-block"},[e("p",null,[e("strong",null,"Input:"),s(),e("span",{class:"example-io"},"nums = [3,9,2,1,7], k = 3")]),e("p",null,[e("strong",null,"Output:"),s(),e("span",{class:"example-io"},"7")]),e("p",null,[e("strong",null,"Explanation:")]),e("ul",null,[e("li",null,[s("1 appears in 2 subarrays of size 3: "),e("code",null,"[9, 2, 1]"),s(" and "),e("code",null,"[2, 1, 7]"),s(".")]),e("li",null,[s("2 appears in 3 subarrays of size 3: "),e("code",null,"[3, 9, 2]"),s(", "),e("code",null,"[9, 2, 1]"),s(", "),e("code",null,"[2, 1, 7]"),s(".")]),e("li",{index:"2"},[s("3 appears in 1 subarray of size 3: "),e("code",null,"[3, 9, 2]"),s(".")]),e("li",{index:"3"},[s("7 appears in 1 subarray of size 3: "),e("code",null,"[2, 1, 7]"),s(".")]),e("li",{index:"4"},[s("9 appears in 2 subarrays of size 3: "),e("code",null,"[3, 9, 2]"),s(", and "),e("code",null,"[9, 2, 1]"),s(".")])]),e("p",null,[s("We return 7 since it is the largest integer that appears in exactly one subarray of size "),e("code",null,"k"),s(".")])],-1),a('<p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [3,9,7,2,1,7], k = 4</span></p><p><strong>Output:</strong> <span class="example-io">3</span></p><p><strong>Explanation:</strong></p><ul><li>1 appears in 2 subarrays of size 4: <code>[9, 7, 2, 1]</code>, <code>[7, 2, 1, 7]</code>.</li><li>2 appears in 3 subarrays of size 4: <code>[3, 9, 7, 2]</code>, <code>[9, 7, 2, 1]</code>, <code>[7, 2, 1, 7]</code>.</li><li>3 appears in 1 subarray of size 4: <code>[3, 9, 7, 2]</code>.</li><li>7 appears in 3 subarrays of size 4: <code>[3, 9, 7, 2]</code>, <code>[9, 7, 2, 1]</code>, <code>[7, 2, 1, 7]</code>.</li><li>9 appears in 2 subarrays of size 4: <code>[3, 9, 7, 2]</code>, <code>[9, 7, 2, 1]</code>.</li></ul><p>We return 3 since it is the largest and only integer that appears in exactly one subarray of size <code>k</code>.</p></div><p><strong class="example">Example 3:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [0,0], k = 1</span></p><p><strong>Output:</strong> <span class="example-io">-1</span></p><p><strong>Explanation:</strong></p><p>There is no integer that appears in only one subarray of size 1.</p></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul>',7)])])}const f=o(r,[["render",i]]);export{_ as __pageData,f as default};
