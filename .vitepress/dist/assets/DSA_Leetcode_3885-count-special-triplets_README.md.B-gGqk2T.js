import{_ as o,c as t,o as l,ag as n}from"./chunks/framework.DUDLMHYb.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3885-count-special-triplets/README.md","filePath":"DSA/Leetcode/3885-count-special-triplets/README.md"}'),c={name:"DSA/Leetcode/3885-count-special-triplets/README.md"};function s(i,e,a,d,r,p){return l(),t("div",null,[...e[0]||(e[0]=[n('<h2 id="_3885-count-special-triplets" tabindex="-1">3885. Count Special Triplets <a class="header-anchor" href="#_3885-count-special-triplets" aria-label="Permalink to &quot;3885. Count Special Triplets&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>You are given an integer array <code>nums</code>.</p><p>A <strong>special triplet</strong> is defined as a triplet of indices <code>(i, j, k)</code> such that:</p><ul><li><code>0 &lt;= i &lt; j &lt; k &lt; n</code>, where <code>n = nums.length</code></li><li><code>nums[i] == nums[j] * 2</code></li><li><code>nums[k] == nums[j] * 2</code></li></ul><p>Return the total number of <strong>special triplets</strong> in the array.</p><p>Since the answer may be large, return it <strong>modulo</strong> <code>10^9 + 7</code>.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [6,3,6]</code></p><p><strong>Output:</strong> <code>1</code></p><p><strong>Explanation:</strong></p><p>The only special triplet is <code>(i, j, k) = (0, 1, 2)</code>, where:</p><ul><li><code>nums[0] = 6</code>, <code>nums[1] = 3</code>, <code>nums[2] = 6</code></li><li><code>nums[0] = nums[1] * 2 = 3 * 2 = 6</code></li><li><code>nums[2] = nums[1] * 2 = 3 * 2 = 6</code></li></ul><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [0,1,0,0]</code></p><p><strong>Output:</strong> <code>1</code></p><p><strong>Explanation:</strong></p><p>The only special triplet is <code>(i, j, k) = (0, 2, 3)</code>, where:</p><ul><li><code>nums[0] = 0</code>, <code>nums[2] = 0</code>, <code>nums[3] = 0</code></li><li><code>nums[0] = nums[2] * 2 = 0 * 2 = 0</code></li><li><code>nums[3] = nums[2] * 2 = 0 * 2 = 0</code></li></ul><h3 id="example-3" tabindex="-1">Example 3: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [8,4,2,8,4]</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong></p><p>There are exactly two special triplets:</p><ul><li><p><code>(i, j, k) = (0, 1, 3)</code></p><ul><li><code>nums[0] = 8</code>, <code>nums[1] = 4</code>, <code>nums[3] = 8</code></li><li><code>nums[0] = nums[1] * 2 = 4 * 2 = 8</code></li><li><code>nums[3] = nums[1] * 2 = 4 * 2 = 8</code></li></ul></li><li><p><code>(i, j, k) = (1, 2, 4)</code></p><ul><li><code>nums[1] = 4</code>, <code>nums[2] = 2</code>, <code>nums[4] = 4</code></li><li><code>nums[1] = nums[2] * 2 = 2 * 2 = 4</code></li><li><code>nums[4] = nums[2] * 2 = 2 * 2 = 4</code></li></ul></li></ul><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>3 &lt;= n == nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^5</code></li></ul>',28)])])}const h=o(c,[["render",s]]);export{m as __pageData,h as default};
