import{_ as r,C as d,c as a,o as i,j as t,ag as n,a as o,G as l,w as p}from"./chunks/framework.DUDLMHYb.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/3227-find-missing-and-repeated-values/README.md","filePath":"DSA/Arrays/3227-find-missing-and-repeated-values/README.md"}'),g={name:"DSA/Arrays/3227-find-missing-and-repeated-values/README.md"};function c(m,e,u,x,f,_){const s=d("font");return i(),a("div",null,[e[5]||(e[5]=t("h2",null,[t("a",{href:"https://leetcode.com/problems/find-missing-and-repeated-values"},"3227. Find Missing and Repeated Values")],-1)),e[6]||(e[6]=t("h3",null,"Easy",-1)),e[7]||(e[7]=t("hr",null,null,-1)),t("p",null,[e[1]||(e[1]=o("You are given a ",-1)),e[2]||(e[2]=t("strong",null,"0-indexed",-1)),e[3]||(e[3]=o(" 2D integer matrix ",-1)),t("code",null,[l(s,{face:"monospace"},{default:p(()=>[...e[0]||(e[0]=[o("grid",-1)])]),_:1})]),e[4]||(e[4]=n(" of size <code>n * n</code> with values in the range <code>[1, n<sup>2</sup>]</code>. Each integer appears <strong>exactly once</strong> except <code>a</code> which appears <strong>twice</strong> and <code>b</code> which is <strong>missing</strong>. The task is to find the repeating and missing numbers <code>a</code> and <code>b</code>.",19))]),e[8]||(e[8]=n(`<p>Return <em>a <strong>0-indexed </strong>integer array </em><code>ans</code><em> of size </em><code>2</code><em> where </em><code>ans[0]</code><em> equals to </em><code>a</code><em> and </em><code>ans[1]</code><em> equals to </em><code>b</code><em>.</em></p><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> grid = [[1,3],[2,2]]
<strong>Output:</strong> [2,4]
<strong>Explanation:</strong> Number 2 is repeated and number 4 is missing so the answer is [2,4].
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> grid = [[9,1,7],[8,9,2],[3,4,6]]
<strong>Output:</strong> [9,5]
<strong>Explanation:</strong> Number 9 is repeated and number 5 is missing so the answer is [9,5].
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= n == grid.length == grid[i].length &lt;= 50</code></li><li><code>1 &lt;= grid[i][j] &lt;= n * n</code></li><li>For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> there is exactly one <code>x</code> that is not equal to any of the grid members.</li><li>For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> there is exactly one <code>x</code> that is equal to exactly two of the grid members.</li><li>For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> except two of them there is exatly one pair of <code>i, j</code> that <code>0 &lt;= i, j &lt;= n - 1</code> and <code>grid[i][j] == x</code>.</li></ul>`,9))])}const A=r(g,[["render",c]]);export{E as __pageData,A as default};
