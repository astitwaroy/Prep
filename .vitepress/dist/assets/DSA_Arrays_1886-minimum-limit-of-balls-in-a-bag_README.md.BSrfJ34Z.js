import{_ as o,c as a,o as t,ag as i}from"./chunks/framework.DUDLMHYb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/1886-minimum-limit-of-balls-in-a-bag/README.md","filePath":"DSA/Arrays/1886-minimum-limit-of-balls-in-a-bag/README.md"}'),n={name:"DSA/Arrays/1886-minimum-limit-of-balls-in-a-bag/README.md"};function l(s,e,r,d,c,m){return t(),a("div",null,[...e[0]||(e[0]=[i('<h2 id="_1886-minimum-limit-of-balls-in-a-bag" tabindex="-1">1886. Minimum Limit of Balls in a Bag <a class="header-anchor" href="#_1886-minimum-limit-of-balls-in-a-bag" aria-label="Permalink to &quot;1886. Minimum Limit of Balls in a Bag&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>You are given an integer array <code>nums</code> where the <code>i</code>th bag contains <code>nums[i]</code> balls. You are also given an integer <code>maxOperations</code>.</p><p>You can perform the following operation at most <code>maxOperations</code> times:</p><ul><li>Take any bag of balls and divide it into two new bags with a <strong>positive</strong> number of balls. <ul><li>For example, a bag of <code>5</code> balls can become two new bags of <code>1</code> and <code>4</code> balls, or two new bags of <code>2</code> and <code>3</code> balls.</li></ul></li></ul><p>Your penalty is the <strong>maximum</strong> number of balls in a bag. You want to <strong>minimize</strong> your penalty after the operations.</p><p>Return <em>the minimum possible penalty after performing the operations</em>.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [9], maxOperations = 2</code></p><p><strong>Output:</strong> <code>3</code></p><p><strong>Explanation:</strong></p><ul><li>Divide the bag with 9 balls into two bags of sizes 6 and 3. <code>[9]</code> → <code>[6,3]</code>.</li><li>Divide the bag with 6 balls into two bags of sizes 3 and 3. <code>[6,3]</code> → <code>[3,3,3]</code>.</li></ul><p>The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.</p><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [2,4,8,2], maxOperations = 4</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong></p><ul><li>Divide the bag with 8 balls into two bags of sizes 4 and 4. <code>[2,4,8,2]</code> → <code>[2,4,4,4,2]</code>.</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. <code>[2,4,4,4,2]</code> → <code>[2,2,2,4,4,2]</code>.</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. <code>[2,2,2,4,4,2]</code> → <code>[2,2,2,2,2,4,2]</code>.</li><li>Divide the bag with 4 balls into two bags of sizes 2 and 2. <code>[2,2,2,2,2,4,2]</code> → <code>[2,2,2,2,2,2,2,2]</code>.</li></ul><p>The bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.</p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= maxOperations, nums[i] &lt;= 10^9</code></li></ul>',22)])])}const b=o(n,[["render",l]]);export{u as __pageData,b as default};
