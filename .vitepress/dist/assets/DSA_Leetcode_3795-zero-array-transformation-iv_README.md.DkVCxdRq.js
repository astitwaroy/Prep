import{_ as o,c as r,o as a,ag as t}from"./chunks/framework.DUDLMHYb.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3795-zero-array-transformation-iv/README.md","filePath":"DSA/Leetcode/3795-zero-array-transformation-iv/README.md"}'),l={name:"DSA/Leetcode/3795-zero-array-transformation-iv/README.md"};function i(n,e,s,c,d,u){return a(),r("div",null,[...e[0]||(e[0]=[t('<h2 id="_3795-zero-array-transformation-iv" tabindex="-1">3795. Zero Array Transformation IV <a class="header-anchor" href="#_3795-zero-array-transformation-iv" aria-label="Permalink to &quot;3795. Zero Array Transformation IV&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>You are given an integer array <code>nums</code> of length <code>n</code> and a 2D array <code>queries</code>, where <code>queries[i] = [lᵢ, rᵢ, valᵢ]</code>.</p><p>Each <code>queries[i]</code> represents the following action on <code>nums</code>:</p><ul><li>Select a subset of indices in the range <code>[lᵢ, rᵢ]</code> from <code>nums</code>.</li><li>Decrement the value at each selected index by <strong>exactly</strong> <code>valᵢ</code>.</li></ul><p>A <strong>Zero Array</strong> is an array with all its elements equal to 0.</p><p>Return the <strong>minimum</strong> possible <strong>non-negative</strong> value of <code>k</code>, such that after processing the first <code>k</code> queries in <strong>sequence</strong>, <code>nums</code> becomes a <strong>Zero Array</strong>. If no such <code>k</code> exists, return -1.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong></p><ul><li><strong>For query 0 (l = 0, r = 2, val = 1):</strong><ul><li>Decrement the values at indices <code>[0, 2]</code> by 1.</li><li>The array will become <code>[1, 0, 1]</code>.</li></ul></li><li><strong>For query 1 (l = 0, r = 2, val = 1):</strong><ul><li>Decrement the values at indices <code>[0, 2]</code> by 1.</li><li>The array will become <code>[0, 0, 0]</code>, which is a Zero Array. Therefore, the minimum value of <code>k</code> is 2.</li></ul></li></ul><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [4,3,2,1], queries = [[1,3,2],[0,2,1]]</code></p><p><strong>Output:</strong> <code>-1</code></p><p><strong>Explanation:</strong></p><p>It is impossible to make nums a Zero Array even after all the queries.</p><h3 id="example-3" tabindex="-1">Example 3: <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [1,2,3,2,1], queries = [[0,1,1],[1,2,1],[2,3,2],[3,4,1],[4,4,1]]</code></p><p><strong>Output:</strong> <code>4</code></p><p><strong>Explanation:</strong></p><ul><li><strong>For query 0 (l = 0, r = 1, val = 1):</strong><ul><li>Decrement the values at indices <code>[0, 1]</code> by 1.</li><li>The array will become <code>[0, 1, 3, 2, 1]</code>.</li></ul></li><li><strong>For query 1 (l = 1, r = 2, val = 1):</strong><ul><li>Decrement the values at indices <code>[1, 2]</code> by 1.</li><li>The array will become <code>[0, 0, 2, 2, 1]</code>.</li></ul></li><li><strong>For query 2 (l = 2, r = 3, val = 2):</strong><ul><li>Decrement the values at indices <code>[2, 3]</code> by 2.</li><li>The array will become <code>[0, 0, 0, 0, 1]</code>.</li></ul></li><li><strong>For query 3 (l = 3, r = 4, val = 1):</strong><ul><li>Decrement the value at index 4 by 1.</li><li>The array will become <code>[0, 0, 0, 0, 0]</code>. Therefore, the minimum value of <code>k</code> is 4.</li></ul></li></ul><h3 id="example-4" tabindex="-1">Example 4: <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example 4:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [1,2,3,2,6], queries = [[0,1,1],[0,2,1],[1,4,2],[4,4,4],[3,4,1],[4,4,5]]</code></p><p><strong>Output:</strong> <code>4</code></p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li><code>1 &lt;= queries.length &lt;= 1000</code></li><li><code>queries[i] = [lᵢ, rᵢ, valᵢ]</code></li><li><code>0 &lt;= lᵢ &lt;= rᵢ &lt; nums.length</code></li><li><code>1 &lt;= valᵢ &lt;= 10</code></li></ul>',28)])])}const h=o(l,[["render",i]]);export{p as __pageData,h as default};
