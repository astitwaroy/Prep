import{_ as o,c as a,o as e,ag as s}from"./chunks/framework.DUDLMHYb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3573-count-substrings-that-can-be-rearranged-to-contain-a-string-i/README.md","filePath":"DSA/Leetcode/3573-count-substrings-that-can-be-rearranged-to-contain-a-string-i/README.md"}'),n={name:"DSA/Leetcode/3573-count-substrings-that-can-be-rearranged-to-contain-a-string-i/README.md"};function r(p,t,c,d,i,l){return e(),a("div",null,[...t[0]||(t[0]=[s('<h2><a href="https://leetcode.com/problems/count-substrings-that-can-be-rearranged-to-contain-a-string-i">3573. Count Substrings That Can Be Rearranged to Contain a String I</a></h2><h3>Medium</h3><hr><p>You are given two strings <code>word1</code> and <code>word2</code>.</p><p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> can be rearranged to have <code>word2</code> as a <span data-keyword="string-prefix">prefix</span>.</p><p>Return the total number of <strong>valid</strong> <span data-keyword="substring-nonempty">substrings</span> of <code>word1</code>.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">word1 = &quot;bcca&quot;, word2 = &quot;abc&quot;</span></p><p><strong>Output:</strong> <span class="example-io">1</span></p><p><strong>Explanation:</strong></p><p>The only valid substring is <code>&quot;bcca&quot;</code> which can be rearranged to <code>&quot;abcc&quot;</code> having <code>&quot;abc&quot;</code> as a prefix.</p></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">word1 = &quot;abcabc&quot;, word2 = &quot;abc&quot;</span></p><p><strong>Output:</strong> <span class="example-io">10</span></p><p><strong>Explanation:</strong></p><p>All the substrings except substrings of size 1 and size 2 are valid.</p></div><p><strong class="example">Example 3:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">word1 = &quot;abcabc&quot;, word2 = &quot;aaabc&quot;</span></p><p><strong>Output:</strong> <span class="example-io">0</span></p></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= word1.length &lt;= 10<sup>5</sup></code></li><li><code>1 &lt;= word2.length &lt;= 10<sup>4</sup></code></li><li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li></ul>',16)])])}const b=o(n,[["render",r]]);export{u as __pageData,b as default};
