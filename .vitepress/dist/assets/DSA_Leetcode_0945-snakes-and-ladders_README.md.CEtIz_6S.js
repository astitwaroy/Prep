import{_ as o,c as a,o as t,ag as r}from"./chunks/framework.DUDLMHYb.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/0945-snakes-and-ladders/README.md","filePath":"DSA/Leetcode/0945-snakes-and-ladders/README.md"}'),d={name:"DSA/Leetcode/0945-snakes-and-ladders/README.md"};function n(s,e,l,i,c,u){return t(),a("div",null,[...e[0]||(e[0]=[r('<h2 id="_945-snakes-and-ladders" tabindex="-1">945. Snakes and Ladders <a class="header-anchor" href="#_945-snakes-and-ladders" aria-label="Permalink to &quot;945. Snakes and Ladders&quot;">​</a></h2><p><strong>Difficulty:</strong> Medium</p><hr><p>You are given an <code>n x n</code> integer matrix <code>board</code> where the cells are labeled from <code>1</code> to <code>n²</code> in a <a href="https://en.wikipedia.org/wiki/Boustrophedon" target="_blank" rel="noreferrer"><strong>Boustrophedon style</strong></a> starting from the bottom left of the board (i.e. <code>board[n - 1][0]</code>) and alternating direction each row.</p><p>You start on square <code>1</code> of the board. In each move, starting from square <code>curr</code>, do the following:</p><ul><li>Choose a destination square <code>next</code> with a label in the range <code>[curr + 1, min(curr + 6, n²)]</code>. <ul><li>This choice simulates the result of a standard <strong>6-sided die roll</strong>: i.e., there are always at most 6 destinations, regardless of the size of the board.</li></ul></li><li>If <code>next</code> has a snake or ladder, you <strong>must</strong> move to the destination of that snake or ladder. Otherwise, you move to <code>next</code>.</li><li>The game ends when you reach the square <code>n²</code>.</li></ul><p>A board square on row <code>r</code> and column <code>c</code> has a snake or ladder if <code>board[r][c] != -1</code>. The destination of that snake or ladder is <code>board[r][c]</code>. Squares <code>1</code> and <code>n²</code> are not the starting points of any snake or ladder.</p><p><strong>Note:</strong> You only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do <strong>not</strong> follow the subsequent snake or ladder.</p><ul><li>For example, suppose the board is <code>[[-1,4],[-1,3]]</code>, and on the first move, your destination square is <code>2</code>. You follow the ladder to square <code>3</code>, but do <strong>not</strong> follow the subsequent ladder to <code>4</code>.</li></ul><p>Return <em>the least number of dice rolls required to reach the square</em> <code>n²</code>. <em>If it is not possible to reach the square, return</em> <code>-1</code>.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><img src="https://assets.leetcode.com/uploads/2018/09/23/snakes.png" alt="Snakes and Ladders"></p><p><strong>Input:</strong> <code>board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]</code></p><p><strong>Output:</strong> <code>4</code></p><p><strong>Explanation:</strong> In the beginning, you start at square 1 (at row 5, column 0).</p><ul><li>You decide to move to square 2 and must take the ladder to square 15.</li><li>You then decide to move to square 17 and must take the snake to square 13.</li><li>You then decide to move to square 14 and must take the ladder to square 35.</li><li>You then decide to move to square 36, ending the game.</li></ul><p>This is the lowest possible number of moves to reach the last square, so return 4.</p><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>board = [[-1,-1],[-1,3]]</code></p><p><strong>Output:</strong> <code>1</code></p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>n == board.length == board[i].length</code></li><li><code>2 &lt;= n &lt;= 20</code></li><li><code>board[i][j]</code> is either <code>-1</code> or in the range <code>[1, n²]</code></li><li>The squares labeled <code>1</code> and <code>n²</code> are not the starting points of any snake or ladder.</li></ul>',22)])])}const m=o(d,[["render",n]]);export{p as __pageData,m as default};
