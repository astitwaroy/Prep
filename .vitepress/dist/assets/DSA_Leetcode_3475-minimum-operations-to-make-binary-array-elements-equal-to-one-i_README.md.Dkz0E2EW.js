import{_ as n,c as o,o as t,ag as s}from"./chunks/framework.DUDLMHYb.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3475-minimum-operations-to-make-binary-array-elements-equal-to-one-i/README.md","filePath":"DSA/Leetcode/3475-minimum-operations-to-make-binary-array-elements-equal-to-one-i/README.md"}'),a={name:"DSA/Leetcode/3475-minimum-operations-to-make-binary-array-elements-equal-to-one-i/README.md"};function r(i,e,l,p,m,u){return t(),o("div",null,[...e[0]||(e[0]=[s('<h2><a href="https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i">3475. Minimum Operations to Make Binary Array Elements Equal to One I</a></h2><h3>Medium</h3><hr><p>You are given a <span data-keyword="binary-array">binary array</span> <code>nums</code>.</p><p>You can do the following operation on the array <strong>any</strong> number of times (possibly zero):</p><ul><li>Choose <strong>any</strong> 3 <strong>consecutive</strong> elements from the array and <strong>flip</strong> <strong>all</strong> of them.</li></ul><p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p><p>Return the <strong>minimum</strong> number of operations required to make all elements in <code>nums</code> equal to 1. If it is impossible, return -1.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [0,1,1,1,0,0]</span></p><p><strong>Output:</strong> <span class="example-io">3</span></p><p><strong>Explanation:</strong><br> We can do the following operations:</p><ul><li>Choose the elements at indices 0, 1 and 2. The resulting array is <code>nums = [<u><strong>1</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>,1,0,0]</code>.</li><li>Choose the elements at indices 1, 2 and 3. The resulting array is <code>nums = [1,<u><strong>1</strong></u>,<u><strong>1</strong></u>,<strong><u>0</u></strong>,0,0]</code>.</li><li>Choose the elements at indices 3, 4 and 5. The resulting array is <code>nums = [1,1,1,<strong><u>1</u></strong>,<u><strong>1</strong></u>,<u><strong>1</strong></u>]</code>.</li></ul></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">nums = [0,1,1,1]</span></p><p><strong>Output:</strong> <span class="example-io">-1</span></p><p><strong>Explanation:</strong><br> It is impossible to make all elements equal to 1.</p></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li><li><code>0 &lt;= nums[i] &lt;= 1</code></li></ul>',16)])])}const d=n(a,[["render",r]]);export{c as __pageData,d as default};
