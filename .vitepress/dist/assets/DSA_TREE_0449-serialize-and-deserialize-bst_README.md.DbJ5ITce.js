import{_ as t,c as r,o as s,ag as a}from"./chunks/framework.DUDLMHYb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/TREE/0449-serialize-and-deserialize-bst/README.md","filePath":"DSA/TREE/0449-serialize-and-deserialize-bst/README.md"}'),n={name:"DSA/TREE/0449-serialize-and-deserialize-bst/README.md"};function o(i,e,l,p,d,c){return s(),r("div",null,[...e[0]||(e[0]=[a(`<h2><a href="https://leetcode.com/problems/serialize-and-deserialize-bst">449. Serialize and Deserialize BST</a></h2><h3>Medium</h3><hr><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p><p><b>The encoded string should be as compact as possible.</b></p><p> </p><p><strong class="example">Example 1:</strong></p><pre><strong>Input:</strong> root = [2,1,3]
<strong>Output:</strong> [2,1,3]
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> root = []
<strong>Output:</strong> []
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li><li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li><li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li></ul>`,14)])])}const g=t(n,[["render",o]]);export{h as __pageData,g as default};
