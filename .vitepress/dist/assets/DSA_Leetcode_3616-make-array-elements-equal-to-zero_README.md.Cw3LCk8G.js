import{_ as o,c as t,o as c,ag as r}from"./chunks/framework.DUDLMHYb.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Leetcode/3616-make-array-elements-equal-to-zero/README.md","filePath":"DSA/Leetcode/3616-make-array-elements-equal-to-zero/README.md"}'),d={name:"DSA/Leetcode/3616-make-array-elements-equal-to-zero/README.md"};function n(a,e,i,l,s,u){return c(),t("div",null,[...e[0]||(e[0]=[r('<h2 id="_3616-make-array-elements-equal-to-zero" tabindex="-1">3616. Make Array Elements Equal to Zero <a class="header-anchor" href="#_3616-make-array-elements-equal-to-zero" aria-label="Permalink to &quot;3616. Make Array Elements Equal to Zero&quot;">​</a></h2><p><strong>Difficulty:</strong> Easy</p><hr><p>You are given an integer array <code>nums</code>.</p><p>Start by selecting a starting position <code>curr</code> such that <code>nums[curr] == 0</code>, and choose a movement <strong>direction</strong> of either left or right.</p><p>After that, you repeat the following process:</p><ul><li>If <code>curr</code> is out of the range <code>[0, n - 1]</code>, this process ends.</li><li>If <code>nums[curr] == 0</code>, move in the current direction by <strong>incrementing</strong> <code>curr</code> if you are moving right, or <strong>decrementing</strong> <code>curr</code> if you are moving left.</li><li>Else if <code>nums[curr] &gt; 0</code>: <ul><li>Decrement <code>nums[curr]</code> by 1.</li><li><strong>Reverse</strong> your movement direction (left becomes right and vice versa).</li><li>Take a step in your new direction.</li></ul></li></ul><p>A selection of the initial position <code>curr</code> and movement direction is considered <strong>valid</strong> if every element in <code>nums</code> becomes 0 by the end of the process.</p><p>Return the number of possible <strong>valid</strong> selections.</p><h3 id="example-1" tabindex="-1">Example 1: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [1,0,2,0,3]</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong></p><p>The only possible valid selections are the following:</p><ul><li><p>Choose <code>curr = 3</code>, and a movement direction to the left.</p><ul><li><code>[1,0,2,0,3]</code> → <code>[1,0,2,0,3]</code> → <code>[1,0,1,0,3]</code> → <code>[1,0,1,0,3]</code> → <code>[1,0,1,0,2]</code> → <code>[1,0,1,0,2]</code> → <code>[1,0,0,0,2]</code> → <code>[1,0,0,0,2]</code> → <code>[1,0,0,0,1]</code> → <code>[1,0,0,0,1]</code> → <code>[1,0,0,0,1]</code> → <code>[1,0,0,0,1]</code> → <code>[0,0,0,0,1]</code> → <code>[0,0,0,0,1]</code> → <code>[0,0,0,0,1]</code> → <code>[0,0,0,0,1]</code> → <code>[0,0,0,0,0]</code>.</li></ul></li><li><p>Choose <code>curr = 3</code>, and a movement direction to the right.</p><ul><li><code>[1,0,2,0,3]</code> → <code>[1,0,2,0,3]</code> → <code>[1,0,2,0,2]</code> → <code>[1,0,2,0,2]</code> → <code>[1,0,1,0,2]</code> → <code>[1,0,1,0,2]</code> → <code>[1,0,1,0,1]</code> → <code>[1,0,1,0,1]</code> → <code>[1,0,0,0,1]</code> → <code>[1,0,0,0,1]</code> → <code>[1,0,0,0,0]</code> → <code>[1,0,0,0,0]</code> → <code>[1,0,0,0,0]</code> → <code>[1,0,0,0,0]</code> → <code>[0,0,0,0,0]</code>.</li></ul></li></ul><h3 id="example-2" tabindex="-1">Example 2: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2:&quot;">​</a></h3><p><strong>Input:</strong> <code>nums = [2,3,4,0,4,1,0]</code></p><p><strong>Output:</strong> <code>0</code></p><p><strong>Explanation:</strong></p><p>There are no possible valid selections.</p><h3 id="constraints" tabindex="-1">Constraints: <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;Constraints:&quot;">​</a></h3><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li><li>There is at least one element <code>i</code> where <code>nums[i] == 0</code>.</li></ul>',22)])])}const h=o(d,[["render",n]]);export{m as __pageData,h as default};
