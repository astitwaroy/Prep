import{_ as t,c as o,o as r,ag as n}from"./chunks/framework.DUDLMHYb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/DFS/0104-maximum-depth-of-binary-tree/README.md","filePath":"DSA/DFS/0104-maximum-depth-of-binary-tree/README.md"}'),s={name:"DSA/DFS/0104-maximum-depth-of-binary-tree/README.md"};function a(p,e,m,i,l,d){return r(),o("div",null,[...e[0]||(e[0]=[n(`<h2><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree">104. Maximum Depth of Binary Tree</a></h2><h3>Easy</h3><hr><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p><p>A binary tree&#39;s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p> </p><p><strong class="example">Example 1:</strong></p><img alt="" src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" style="width:400px;height:277px;"><pre><strong>Input:</strong> root = [3,9,20,null,null,15,7]
<strong>Output:</strong> 3
</pre><p><strong class="example">Example 2:</strong></p><pre><strong>Input:</strong> root = [1,null,2]
<strong>Output:</strong> 2
</pre><p> </p><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul>`,14)])])}const c=t(s,[["render",a]]);export{u as __pageData,c as default};
