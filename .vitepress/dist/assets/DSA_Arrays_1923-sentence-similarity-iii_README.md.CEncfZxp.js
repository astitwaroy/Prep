import{_ as l,C as i,c as p,o as d,ag as a,j as n,a as s,G as o,w as r}from"./chunks/framework.DUDLMHYb.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DSA/Arrays/1923-sentence-similarity-iii/README.md","filePath":"DSA/Arrays/1923-sentence-similarity-iii/README.md"}'),u={name:"DSA/Arrays/1923-sentence-similarity-iii/README.md"};function g(c,e,m,f,y,x){const t=i("font");return d(),p("div",null,[e[22]||(e[22]=a('<h2><a href="https://leetcode.com/problems/sentence-similarity-iii">1923. Sentence Similarity III</a></h2><h3>Medium</h3><hr><p>You are given two strings <code>sentence1</code> and <code>sentence2</code>, each representing a <strong>sentence</strong> composed of words. A sentence is a list of <strong>words</strong> that are separated by a <strong>single</strong> space with no leading or trailing spaces. Each word consists of only uppercase and lowercase English characters.</p><p>Two sentences <code>s1</code> and <code>s2</code> are considered <strong>similar</strong> if it is possible to insert an arbitrary sentence (<em>possibly empty</em>) inside one of these sentences such that the two sentences become equal. <strong>Note</strong> that the inserted sentence must be separated from existing words by spaces.</p><p>For example,</p>',6)),n("ul",null,[n("li",null,[e[1]||(e[1]=n("code",null,'s1 = "Hello Jane"',-1)),e[2]||(e[2]=s(" and ",-1)),e[3]||(e[3]=n("code",null,'s2 = "Hello my name is Jane"',-1)),e[4]||(e[4]=s(" can be made equal by inserting ",-1)),e[5]||(e[5]=n("code",null,'"my name is"',-1)),e[6]||(e[6]=s(" between ",-1)),e[7]||(e[7]=n("code",null,'"Hello"',-1)),o(t,{face:"monospace"}),e[8]||(e[8]=s("and ",-1)),e[9]||(e[9]=n("code",null,'"Jane"',-1)),o(t,{face:"monospace"},{default:r(()=>[...e[0]||(e[0]=[s(" in s1.",-1)])]),_:1})]),n("li",null,[o(t,{face:"monospace"},{default:r(()=>[...e[10]||(e[10]=[n("code",null,'s1 = "Frog cool"',-1)])]),_:1}),e[12]||(e[12]=s("and",-1)),o(t,{face:"monospace"},{default:r(()=>[...e[11]||(e[11]=[n("code",null,'s2 = "Frogs are cool"',-1)])]),_:1}),e[13]||(e[13]=s("are ",-1)),e[14]||(e[14]=n("strong",null,"not",-1)),e[15]||(e[15]=s(" similar, since although there is a sentence ",-1)),e[16]||(e[16]=n("code",null,'"s are"',-1)),e[17]||(e[17]=s(" inserted into ",-1)),e[18]||(e[18]=n("code",null,"s1",-1)),e[19]||(e[19]=s(", it is not separated from ",-1)),e[20]||(e[20]=n("code",null,'"Frog"',-1)),e[21]||(e[21]=s(" by a space.",-1))])]),e[23]||(e[23]=a('<p>Given two sentences <code>sentence1</code> and <code>sentence2</code>, return <strong>true</strong> if <code>sentence1</code> and <code>sentence2</code> are <strong>similar</strong>. Otherwise, return <strong>false</strong>.</p><p> </p><p><strong class="example">Example 1:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">sentence1 = &quot;My name is Haley&quot;, sentence2 = &quot;My Haley&quot;</span></p><p><strong>Output:</strong> <span class="example-io">true</span></p><p><strong>Explanation:</strong></p><p><code>sentence2</code> can be turned to <code>sentence1</code> by inserting &quot;name is&quot; between &quot;My&quot; and &quot;Haley&quot;.</p></div><p><strong class="example">Example 2:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">sentence1 = &quot;of&quot;, sentence2 = &quot;A lot of words&quot;</span></p><p><strong>Output:</strong> <span class="example-io">false</span></p><p><strong>Explanation:</strong></p><p>No single sentence can be inserted inside one of the sentences to make it equal to the other.</p></div><p><strong class="example">Example 3:</strong></p><div class="example-block"><p><strong>Input:</strong> <span class="example-io">sentence1 = &quot;Eating right now&quot;, sentence2 = &quot;Eating&quot;</span></p><p><strong>Output:</strong> <span class="example-io">true</span></p><p><strong>Explanation:</strong></p><p><code>sentence2</code> can be turned to <code>sentence1</code> by inserting &quot;right now&quot; at the end of the sentence.</p></div><p> </p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 100</code></li><li><code>sentence1</code> and <code>sentence2</code> consist of lowercase and uppercase English letters and spaces.</li><li>The words in <code>sentence1</code> and <code>sentence2</code> are separated by a single space.</li></ul>',11))])}const E=l(u,[["render",g]]);export{b as __pageData,E as default};
